#
# Process this file with autoconf to produce a configure script.
#
# $Id$

AC_INIT(configure)
AM_CONFIG_HEADER(config.h)
AM_INIT_AUTOMAKE(aterm, 2.0beta)

AC_PROG_CC

# Default values
CC_GCC=gcc
CFLAGS_GCC="-Wall -g -O" #" -O4" disabled due to gcc optimizer bugs
LFLAGS_GCC=""
DEFS_GCC="\$(DEFS) -DNDEBUG"
INCL_GCC=""

CC_CC=cc
CFLAGS_CC="-O"
LFLAGS_CC=""
DEFS_CC="\$(DEFS) -DNDEBUG"
INCL_CC=""

CC_DBG=gcc
CFLAGS_DBG="-Wall -g"
LFLAGS_DBG="-g"
DEFS_DBG="\$(DEFS)"
INCL_DBG=""

CC_PROF=gcc
CFLAGS_PROF="-Wall -pg -g -O -DNDEBUG"
LFLAGS_PROF="-pg"
DEFS_PROF="\$(DEFS)"
INCL_PROF=""

CC_CC64=cc
CFLAGS_CC64="-64 -DAT_64BIT"
LFLAGS_CC64="-64"
INCL_CC64=""

CC_NS=gcc
CFLAGS_NS="-Wall -DNDEBUG -O -DXGC_VERBOSE -DWITH_STATS" # " -O2" disabled due to gcc optimizer bugs
LFLAGS_NS=""
DEFS_NS="\$(DEFS) -DNO_SHARING"
INCL_NS=""

AC_PROG_CC

CURDATE=`date`

AC_PROG_RANLIB
AR=ar
AC_SUBST(AR)

AC_AIX

AC_SET_MAKE

# {{{  Handle --with-cflags option

AC_ARG_WITH(cflags,
   [  --with-cflags=CFLAGS     standard options of C compiler],
   CFLAGS=${withval},
   if test "a${GCC}" = "ayes"; then
     CFLAGS="-Wall -DNDEBUG -O -DXGC_VERBOSE -DXHASHPEM  -DWITH_STATS" # " -O2" disabled due to gcc optimizer bugs
   fi;
)

AC_SUBST(CFLAGS)

# }}}

AC_ARG_WITH(gcc,
   [  --with-gcc               create gcc version (libATerm-gcc.a)],
      ATERM_LIB_GCC=libATerm-gcc.a,)

AC_ARG_WITH(cc,
   [  --with-cc                create cc version (libATerm-cc.a)],
      ATERM_LIB_CC=libATerm-cc.a,)

AC_ARG_WITH(dbg,
   [  --with-dbg               create debug version (libATerm-dbg.a)],
      ATERM_LIB_DBG=libATerm-dbg.a,)

AC_ARG_WITH(prof,
   [  --with-prof              create profiling version (libATerm-prof.a)],
      ATERM_LIB_PROF=libATerm-prof.a,)


AC_ARG_WITH(all,
   [  --with-all               convenience alias for --with-{gcc,cc,dbg,prof}],
      ATERM_LIB_GCC=libATerm-gcc.a
      ATERM_LIB_CC=libATerm-cc.a
      ATERM_LIB_DBG=libATerm-dbg.a
      ATERM_LIB_PROF=libATerm-prof.a,)

AC_ARG_WITH(nosharing,
   [  --with-nosharing         generate a library that does no term sharing],
      ATERM_LIB_NS=libATerm-ns.a,)

AC_ARG_WITH(64bit,
   [  --with-64bit             create 64 bit cc version (libATerm-cc64.a)],
    CC=${CC_CC64}
    CFLAGS=${CFLAGS_CC64}
    LDFLAGS=${LDFLAGS_CC64}
    INCL=${INCL_CC64},)

JAVA_SUBDIR=
AC_ARG_WITH(java,
   [  --with-java              create Java "library" (jdk-1.2 and up).],
      JAVA_SUBDIR="java",)
AC_SUBST(JAVA_SUBDIR)

VISITOR_PKG=aterm.visitor
AC_ARG_WITH(visitor-pkg,
   [  --with-visitor-pkg       change visitor package (default: aterm.visitor)],
  VISITOR_PKG=${withval},)
AC_SUBST(VISITOR_PKG)

TEX_DOCLET=
JAVA_API_PS=
AC_ARG_WITH(texdoclet,
   [  --with-texdoclet         specify location of TexDoclet (default: unused)],
  TEX_DOCLET=${withval}
  JAVA_API_PS="java-api.ps",)
AC_SUBST(TEX_DOCLET)
AC_SUBST(JAVA_API_PS)

AC_SUBST(ATERM_LIB_GCC)
AC_SUBST(ATERM_LIB_CC)
AC_SUBST(ATERM_LIB_DBG)
AC_SUBST(ATERM_LIB_PROF)
AC_SUBST(ATERM_LIB_NS)

AC_SUBST(XDEFS)

AC_SUBST(CC_GCC)
AC_SUBST(CC_CC)
AC_SUBST(CC_DBG)
AC_SUBST(CC_PROF)
AC_SUBST(CC_NS)

AC_SUBST(CFLAGS_CC)
AC_SUBST(CFLAGS_GCC)
AC_SUBST(CFLAGS_DBG)
AC_SUBST(CFLAGS_PROF)
AC_SUBST(CFLAGS_NS)

AC_SUBST(DEFS_CC)
AC_SUBST(DEFS_GCC)
AC_SUBST(DEFS_DBG)
AC_SUBST(DEFS_PROF)
AC_SUBST(DEFS_NS)

AC_SUBST(INCL_CC)
AC_SUBST(INCL_GCC)
AC_SUBST(INCL_DBG)
AC_SUBST(INCL_PROF)
AC_SUBST(INCL_NS)

AC_SUBST(LFLAGS_CC)
AC_SUBST(LFLAGS_GCC)
AC_SUBST(LFLAGS_DBG)
AC_SUBST(LFLAGS_PROF)
AC_SUBST(LFLAGS_NS)

AC_HAVE_FUNCS(strdup)

# Find out if we have rand48 suite
AC_CHECK_FUNCS(lrand48 srand48)

AC_OUTPUT(
  Makefile
  aterm/Makefile
  utils/Makefile
  test/Makefile
  java/Makefile
  java/aterm/Makefile
  java/aterm/ATermVisitable.java
  java/aterm/ATermVisitor.java
  java/aterm/ATermVisitFailure.java
  java/aterm/ATermForward.java
  java/aterm/pure/Makefile
  java/aterm/pure/ATermVisitableImpl.java
  java/aterm/visitor/Makefile
  java/aterm/test/Makefile
  java/aterm/test/VisitorBenchmark.java
  doc/Makefile
  doc/examples/Makefile
  doc/spec/Makefile
)
