# $Id$

AC_INIT
AC_CONFIG_SRCDIR([configure])
AC_PREREQ(2.59)
AC_CANONICAL_TARGET([])

AM_INIT_AUTOMAKE(aterm, 2.1)

AC_PROG_CC

# Default values
CC_GCC=gcc
CFLAGS_GCC="-Wall -g -O" #" -O4" disabled due to gcc optimizer bugs
LFLAGS_GCC=""
DEFS_GCC="\$(DEFS) -DNDEBUG"
INCL_GCC=""

CC_CC=cc
CFLAGS_CC="-O"
LFLAGS_CC=""
DEFS_CC="\$(DEFS) -DNDEBUG"
INCL_CC=""

CC_DBG=gcc
CFLAGS_DBG="-Wall -g"
LFLAGS_DBG="-g"
DEFS_DBG="\$(DEFS)"
INCL_DBG=""

CC_PROF=gcc
CFLAGS_PROF="-Wall -pg -g -O -DNDEBUG"
LFLAGS_PROF="-pg"
DEFS_PROF="\$(DEFS)"
INCL_PROF=""

CC_NS=gcc
CFLAGS_NS="-Wall -DNDEBUG -O -DXGC_VERBOSE -DWITH_STATS" # " -O2" disabled due to gcc optimizer bugs
LFLAGS_NS=""
DEFS_NS="\$(DEFS) -DNO_SHARING"
INCL_NS=""

CURDATE=`date`

AC_PROG_RANLIB
AR=ar
AC_SUBST(AR)

AC_AIX

AC_PROG_MAKE_SET([])

if test "${with_64bit+set}" = set; then
case "$target_cpu" in
   i*86)
	AC_MSG_ERROR("--with-64bit not supported on 32 bit platforms");
 	;;
   sparc)
   if test `uname -m` = "sun4u"; then
	if test -z ${CC_CC64}; then
		CC_CC64=${CC}
	else
		CC=${CC_CC64}
	fi

	AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[]], [[[#ifndef __GNUC__
       		choke me
  		#endif
	]]])],[cc_cc64_gnu=yes],[cc_cc64_gnu=no])

	if test $cc_cc64_gnu = yes; then
		CFLAGS_CC64="-m64 -DAT_64BIT";
		LFLAGS_CC64="-m64";
	else
		CFLAGS_CC64="-xarch=v9 -DAT_64BIT";
		LFLAGS_CC64="-xarch=v9";
   	fi
   fi
   ;;
esac;
fi
AC_SUBST(CC_CC64)
AC_SUBST(CFLAGS_CC64)
AC_SUBST(LFLAGS_CC64)

# {{{  Handle --with-cflags option

AC_ARG_WITH(cflags,
   [  --with-cflags=CFLAGS     standard options of C compiler],
   CFLAGS=${withval},
   if test "a${GCC}" = "ayes"; then
     CFLAGS="-Wall -DNDEBUG -O -DXGC_VERBOSE -DXHASHPEM  -DWITH_STATS" # " -O2" disabled due to gcc optimizer bugs
   fi;
)

AC_SUBST(CFLAGS)

# }}}

AC_ARG_WITH(gcc,
   [  --with-gcc               create gcc version (libATerm-gcc.a)],
      ATERM_LIB_GCC=libATerm-gcc.a,)

AC_ARG_WITH(cc,
   [  --with-cc                create cc version (libATerm-cc.a)],
      ATERM_LIB_CC=libATerm-cc.a,)

AC_ARG_WITH(dbg,
   [  --with-dbg               create debug version (libATerm-dbg.a)],
      ATERM_LIB_DBG=libATerm-dbg.a,)

AC_ARG_WITH(prof,
   [  --with-prof              create profiling version (libATerm-prof.a)],
      ATERM_LIB_PROF=libATerm-prof.a,)


AC_ARG_WITH(all,
   [  --with-all               convenience alias for --with-{gcc,cc,dbg,prof}],
      ATERM_LIB_GCC=libATerm-gcc.a
      ATERM_LIB_CC=libATerm-cc.a
      ATERM_LIB_DBG=libATerm-dbg.a
      ATERM_LIB_PROF=libATerm-prof.a,)

AC_ARG_WITH(nosharing,
   [  --with-nosharing         generate a library that does no term sharing],
      ATERM_LIB_NS=libATerm-ns.a,)

AC_ARG_WITH(64bit,
   [  --with-64bit             create 64 bit cc version (libATerm-cc64.a)],
      ATERM_LIB_CC64=libATerm-cc64.a,
    )

AC_SUBST(ATERM_LIB_GCC)
AC_SUBST(ATERM_LIB_CC)
AC_SUBST(ATERM_LIB_DBG)
AC_SUBST(ATERM_LIB_PROF)
AC_SUBST(ATERM_LIB_NS)
AC_SUBST(ATERM_LIB_CC64)

AC_SUBST(XDEFS)

AC_SUBST(CC_GCC)
AC_SUBST(CC_CC)
AC_SUBST(CC_DBG)
AC_SUBST(CC_PROF)
AC_SUBST(CC_NS)

AC_SUBST(CFLAGS_CC)
AC_SUBST(CFLAGS_GCC)
AC_SUBST(CFLAGS_DBG)
AC_SUBST(CFLAGS_PROF)
AC_SUBST(CFLAGS_NS)

AC_SUBST(DEFS_CC)
AC_SUBST(DEFS_GCC)
AC_SUBST(DEFS_DBG)
AC_SUBST(DEFS_PROF)
AC_SUBST(DEFS_NS)

AC_SUBST(INCL_CC)
AC_SUBST(INCL_GCC)
AC_SUBST(INCL_DBG)
AC_SUBST(INCL_PROF)
AC_SUBST(INCL_NS)

AC_SUBST(LFLAGS_CC)
AC_SUBST(LFLAGS_GCC)
AC_SUBST(LFLAGS_DBG)
AC_SUBST(LFLAGS_PROF)
AC_SUBST(LFLAGS_NS)

AC_CHECK_FUNCS([strdup])

# Find out if we have rand48 suite
AC_CHECK_FUNCS(lrand48 srand48)

AC_CONFIG_FILES([Makefile
  aterm/Makefile
  utils/Makefile
  test/Makefile
  doc/Makefile
  doc/examples/Makefile
  doc/spec/Makefile
  aterm.spec
])
AC_OUTPUT
