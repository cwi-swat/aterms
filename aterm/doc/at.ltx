\documentclass{article}

%{{{ LaTeX configuration

\usepackage[english]{babel}
\usepackage{epsfig}
\usepackage{latexsym}
\usepackage{spec/ASF+SDF}
\usepackage{spec/ASF+SDF-options}

\newcommand{\ATerm}{ATerm}
\newcommand{\ATerms}{ATerms}
\newcommand{\AFun}{AFun}
\newcommand{\AFuns}{AFuns}
\def\metaenv{Meta-En\-vir\-on\-ment}
\def\asmetaenv{{\sc Asf+Sdf}\ Meta-En\-vir\-on\-ment}
\def\aterms{\mbox{ATerms}}
\def\aterm{\mbox{ATerm}}
\def\asfix{\mbox{\sc AsFix}}
\def\sdf{\mbox{\sc Sdf}}
\def\asf{\mbox{\sc Asf}}
\def\asdf{\mbox{\sc Asf+Sdf}}
\def\ascii{\mbox{\sc Ascii}}
\def\TB{ToolBus}

\newcommand{\baf}{BAF}

%}}}

%{{{ Title page

\title{Efficient Annotated Terms}
\author{M.G.J. van den Brand$^{^1}$\\
        H.A. de Jong$^{^2}$\\
        P. Klint$^{1,2}$\\
        P.A. Olivier$^{^2}$\\
        \vspace{.1cm}\\
        {\small\sl $^1$CWI,
        Department of Software Engineering\vspace{-.2cm}}\\
        {\small\sl Kruislaan 413, 1098 SJ Amsterdam, The Netherlands}
        \vspace{.1cm}\\
        {\small\sl $^1$University of Amsterdam,
        Programming Research Group\vspace{-.2cm}}\\
        {\small\sl Kruislaan 403, 1098 SJ Amsterdam, The Netherlands}
        %%\vspace{.1cm}\\
        %%{\small \sl\tt Mark.van.den.Brand@cwi.nl, jong@wins.uva.nl, Paul.Klint@cwi.nl, olivierp@wins.uva.nl}
}

\begin{document}
\maketitle

%}}}

%{{{ Abstract

\begin{abstract}
How do distributed applications exchange tree-like data structures?  
We introduce the abstract data type of \emph{Annotated Terms}
(\emph{ATerms}) and discuss their design, implementation and
application.  A comprehensive procedural interface enables
creation and manipulation of ATerms in C or Java.  
The ATerm implementation is based on maximal subterm
sharing and automatic garbage collection.  
A binary exchange format for the
concise representation of ATerms (sharing preserved) allows the
fast exchange of ATerms between applications.  In a typical
application---parse trees which contain considerable redundant 
information---less than 2 \emph{bytes} are needed to represent 
a node in memory,
and less than 2 \emph{bits} are needed to represent it in binary format. 
The implementation of ATerms scales up to the manipulation
of ATerms in the giga-byte range.
\end{abstract}

%}}}

\input{aterm.ltx}

\section*{Availability}

The \ATerm\ library is available on the web at
\begin{quote}
{\small 
\begin{verbatim}
http://www.cwi.nl/projects/MetaEnv/aterm
\end{verbatim}
}
\end{quote}

\noindent The current version of the library is available for Unix (including Linux)
and Windows/NT.  We are currently working on a 64-bits implementation
of the library.


%%\acks
\section*{Acknowledgments}

We want to thank all current users of the \ATerm\ library.  Special thanks
to Jan-Friso Groote (for his input and sometimes severe requirements,
and his implementation of the ATermTable and ATermIndexedSet related
functionality) and to Merijn de Jonge and Jeroen Scheerder (for detecting
a large number of intricate bugs).  We thank Alexander van den Bergh for
porting the \ATerm\ library to Windows/NT as part of his Master thesis
project, and Joost Visser for providing us with useful information on
ASDL and for writing a tool to pickle \aterms.  We thank Pierre-Etienne
Moreau for the fruitful discussions on this subject during his stay
in Amsterdam.  Finally, we want to thank the anonymous referees for
their constructive remarks.

\bibliographystyle{alpha}
\bibliography{thesis}

\input{append.ltx}

\end{document}
