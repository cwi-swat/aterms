\documentclass{article}
\title{Corrections to ``Efficient Annotated Terms''}
\author{M.G.J. van den Brand\\
        H.A. de Jong\\
        P. Klint\\
        P.A. Olivier}

\begin{document}

\maketitle

\section{Introduction}

In this note we give a detailed response to the referee reports for
the paper \emph{Efficient Annotated Terms} by M.G.J. van den Brand,
H.A. de Jong, P. Klint and P.A. Olivier as submitted to SPE.


\section{Comments on the issues raised by referees}

\subsection{First Referee}

\begin{itemize}

\item[1.] Claim ``2 bits per node'' is misleading.

\emph{We agree that this claim is only based on the examples
described in the paper and that the phrasing we use is rather
absolute. We also agree that this result is obtained for parse
trees. The phrasing in the paper has been adjusted accordingly.
However, the applications are not so similar as the referee thinks.
Random-unique and Random are randomly generated terms without
redundancy.  COBOL system and Risla library are indeed parse trees
using AsFix and have a lot of redundancy. LPO is a data structure
representing the state space of a protocol.
A few new examples are added where the ATerms are used to represent
abstract syntax trees.}

\item[2.] ATerms do not handle complex data structures.

\emph{ATerms can represent trees. The issue raised by the referee
is that ATerms cannot represent complex data structures
\emph{directly}, i.e., a direct representation of a cyclic graph is
not possible.  However, in our experience they can very well be used
to represent such data structures \emph{indirectly}, i.e., some form
of encoding is used to represent the complex data structure as
ATerm. In practice, we use them in this way frequently.}

\item[3.] In reality, ATerms can only handle tree-like data structures.

\emph{See issue \#2.}

\item[4.] Preserving sharing is confusing.

\emph{We agree that sharing is not a property per se of
ATerms but rather of their representation.
In 2/6 we have changed ``preserve any sharing''
into ``preserve any implicit or explicit sharing'' to stress this.
Note, that we are formulating here general requirements and we are not yet
focussing on ATerms.
We disagree with the remark of the referee that using text I/O will
give precisely the same amount of sharing as using binary I/O.  This
is only the case if the amount of sharing is maximal.  Intermediate
amounts of sharing cannot be expressed.  An example has been added to
6/1/4 to further illustrate this point.  }

\item[5.] Averages is misleading in Table 1.

\emph{The tables have been split in two: ``artificial cases'' and ``real cases''.
The row ``Averages'' is now labelled ``Real Case Averages'' to make it
more explicit which cases are used in the average.
We agree, of course, that one can question how representative our real
cases are. However, we still find it useful to give an average to
summarize the measurements.
}

\item[6.] Figure 3 needs work.

\emph{We have labeled the axes of Figure 3, and slightly increased
the vertical size of the figure to make it more readable. Note that
this figure only serves to give a general impression of the increase
in sharing as the size of a Cobol program increases, so the individual
data points are not all that important, but the strong correlation 
between size and sharing is.}

\item[7.] Measurements are only concerned with AsFix-style data.

\emph{This is not true. The cases Random-Unique, Random,
COBOL Parser table and LPO do not use AsFix.
Furthermore, a few new examples are added where the ATerms are used to represent
abstract syntax trees.}

\item[8.] The claim ``2 bits per node'' is misleading.
\emph{See issue \#1.}

\item[9.] Precision of integers and reals is not specified.

\emph{A remark is added to Section 2.1 which gives more details
about the sizes of the integers and reals.}

\item[10.] Mention S-expressions, SGML and XML in section 6.1

\emph{We did already discuss XML in the original text.
A comparison with S-expressions has been added. 
A discussion (including some measurements)
of ASDL has been added.}

\item[11.] Spell ``data structures'' consistently. \emph{Fixed.}

\item[12.] Period in numbers?

\emph{The periods have been changed into commas.}

\item[13.] Typo 25/6/8. \emph{Fixed.}

\item[14.] Typo 25/6/9. \emph{Fixed.}

\item[15.] Paragraph 4/-2 is vague. \emph{Explanation added.}

\item[16.] Section 3.3.1 could be shorter.

\emph{We fully agree that the issues of memory management in
an unsafe C environment are fully covered by the cited references.
However, we prefer to keep this section since it makes the paper
more self-contained.}

\item[17.] Typo 16/5. \emph{Fixed.}

\item[18.] Typo 16/-1. \emph{Fixed.}

\item[19.] Typo 27/3/1. \emph{Fixed.}

\item[20.] Omit Appendix B or condense it.

\emph{We prefer to keep this appendix, as it gives
insight in the details of the level~2 interface,
thereby also emphasizing the simplicity of the level~1
 interface.
}

\end{itemize}

\subsection{Second Referee}

\begin{itemize}

\item[21.] Comparison with related work is weak (section 6).
\emph{See issue \#10.}

\item[22.] Make clearer comparison with related work.
\emph{See issue \#21.}

\item[23.] Refer to ASDL.

\emph{A paragraph has been  added to Section 6, describing
ASDL and giving some figures comparing the BAF format with
ASDL pickles.}

\item[24.] Give measurements that compare with other methods.

\emph{We share the wish of the referee to include performance measurements
with other approaches. However, this kind of comparisons is very hard
to make in a completely objective manner even for toy examples:
writing an application in someone else's system is always (rightly)
criticized since the system in question is not used to its full extent
due to the inexperience with that system. For larger examples (which
we are more interested in) this becomes even harder. 
For these reasons, we have have focussed on measurements that
are mutually comparable (i.e., effect of sharing, compression
of binary form, and the like).
However, we have
now added measurements related to reading/writing ASDL. Also see issue
\#23.  }



\item[25.] Typo and question: binary encoding to/from strings.
\emph{Typo fixed. Regarding the questions:
(1) No we currently do not support
a function to use binary encodings to/from strings.  
(2) Yes, one of our primary applications of ATerms ships
 them in BAF format across a network. This is achieved by using the file
 operations with file descriptors that point to a socket or pipe.
 A comment about this has been added in section 2.2.2.
}


\item[26.] Typo. page 14. \emph{Fixed.}

\item[27.] Example in 3.5.2 is not used consistently.

\emph{The example term is consistently updated throughout this section.}

\item[28.] Label axes in Figure 3. \emph{See issue \#6.}

\item[29.] Which time do you measure?

\emph{User CPU time is measured. We have added a note explaining this.}

\item[30.] Why is reading binary files faster than writing them and
is it the other way around for Ascii files?

\emph{An explanation added which is based on the observation that
reading the Ascii representation involves more matching operations.
When writing BAF, we need to do more calculations to encode the sharing
of terms.}

\item[31.] Typo 4.2. \emph{Fixed.}

\item[32.] Tables 2 and 3 are confusing.

\emph{We give totals in seconds (s) and times per node in micro-seconds
($\mu$s). Using the same unit would enlarge the values for totals
in an undesirable way. No change made.}

\end{itemize}

\subsection{Third Referee}

\begin{itemize}
\item [33.] Add pointer to related work (6.1) in introduction. \emph{Done.}

\item[34.] What is the relationship between function symbols and function names?

\emph{
A remark has been added that these
3 bytes represent an index in a table containing the function symbols.}

\item[35.] How are integers and reals encoded?
\emph{See issue \#9.}

\item[36.] Typo on page 16. \emph{See issue \#18.}

\item[37.] Give better intro to ASF+SDF.

\emph{
A section has been added to briefly explain ASF+SDF.}

\end{itemize}


\end{document}
