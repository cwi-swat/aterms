%% Audience:
%% 
%% The Xootic Magazine (XoM) is an english magazine for ex-ooti's: a
%% group of technical, well-educated people (Master's degree and above).
%% 
%% Technical issues:
%% 
%% 1. Paper size: A4.
%% 
%% 2. Layout: two columns.
%% 
%% 3. Article size: ranges from 4 to 10 pages.
%% 
%% 4. Three levels of sectional units with display headers: sections,
%%    subsections, and subsubsections.
%% 
%% 5. Sectional units are NOT numbered (keep this in mind while
%%    cross-referencing to parts of your article).
%% 
%% 6. Tables and figures are numbered.
%% 
%% 7. Large tables and figures are printed in one column of total page
%%    width.

\documentclass[a4paper,twocolumn]{article}

%{{{ LaTeX configuration

\usepackage[english]{babel}
\usepackage{epsfig}

\newcommand{\ATerm}{ATerm}
\newcommand{\ATerms}{ATerms}
\newcommand{\AFun}{AFun}
\newcommand{\AFuns}{AFuns}
\def\metaenv{Meta-En\-vir\-on\-ment}
\def\asmetaenv{{\sc Asf+Sdf}\ Meta-En\-vir\-on\-ment}
\def\aterms{\mbox{ATerms}}
\def\aterm{\mbox{ATerm}}
\def\asfix{\mbox{\sc AsFix}}
\def\sdf{\mbox{\sc Sdf}}
\def\asf{\mbox{\sc Asf}}
\def\asdf{\mbox{\sc Asf+Sdf}}
\def\ascii{\mbox{\sc Ascii}}
\def\TB{ToolBus}

\newcommand{\baf}{BAF}

%}}}

%{{{ Title page

\title{Efficient Annotated Terms \\
  $Revision$
}
\author{M.G.J. van den Brand$^{^1}$\\
        H.A. de Jong$^{^2}$\\
        P. Klint$^{1,2}$\\
        P.A. Olivier$^{^2}$\\
        \vspace{.1cm}\\
        {\small\sl $^1$CWI,
        Department of Software Engineering\vspace{-.2cm}}\\
        {\small\sl Kruislaan 413, 1098 SJ Amsterdam, The Netherlands}
        \vspace{.1cm}\\
        {\small\sl $^1$University of Amsterdam,
        Programming Research Group\vspace{-.2cm}}\\
        {\small\sl Kruislaan 403, 1098 SJ Amsterdam, The Netherlands}
}

\begin{document}
\maketitle

%}}}

%{{{ Abstract

\begin{abstract}

How do distributed applications exchange tree-like data structures?  We
introduce the abstract data type of \emph{Annotated Terms} (\emph{ATerms})
and discuss their design, implementation and application.  A comprehensive
procedural interface enables creation and manipulation of ATerms in C
or Java.  The ATerm implementation is based on maximal subterm sharing and
automatic garbage collection.  A binary exchange format for the concise
representation of ATerms (sharing preserved) allows the fast exchange of
ATerms between applications.  In a typical application---parse trees which
contain considerable redundant information---less than 2 \emph{bytes}
are needed to represent a node in memory, and less than 2 \emph{bits}
are needed to represent it in binary format.  The implementation of
ATerms scales up to the manipulation of ATerms in the giga-byte range.

\end{abstract}

%}}}

\end{document}
