\documentclass[a4paper]{article}

%{{{ LaTeX configuration

\usepackage[english]{babel}
\usepackage{epsfig}
\usepackage{latexsym}
\usepackage{verbatim}

\newcommand{\ATerm}{ATerm}
\newcommand{\ATerms}{ATerms}
\newcommand{\AFun}{AFun}
\newcommand{\AFuns}{AFuns}
\def\aterms{\mbox{ATerms}}
\def\aterm{\mbox{ATerm}}
\def\appl{\mbox{ATermAppl}}
\def\atlist{\mbox{ATermList}}
\def\C{\texttt{C}}
\def\gcc{\mbox{gcc}}

%}}}
% {{{  Title definition

\title{
  Compiler Optimization Effects on the\\
  ATerm Garbage Collector\\
  $Revision$
}

\author{
  M.G.J. van den Brand$^{^1}$\\
  H.A. de Jong$^{^1}$\\
  P.A. Olivier$^{^1}$\\
  \vspace{.1cm}\\
  {\small\sl $^1$CWI,
  Department of Software Engineering\vspace{-.2cm}}\\
  {\small\sl Kruislaan 413, 1098 SJ Amsterdam, The Netherlands}
}

% }}}

\begin{document}
\maketitle

% {{{  Abstract

\begin{abstract}

\ATerm\ (short for Annotated Term) is an abstract data type designed
for the exchange of tree-like data structures between distributed
applications. The \texttt{C}-implementation of \ATerms\ is a library
based on maximal subterm sharing and automatic garbage collection.
This paper shows how a compilation technique called \emph{strength
reduction} killed the conservative garbage collector used in this
\C-library. We show how inspecting the generated assembly
helped point out a flaw in the assumptions upon which the conservative
garbage collector implementation was based, and how we repaired the
collector. Finally, we point out that other, even more ``intelligent''
optimizations could still fool our repaired collector.

\end{abstract}

% }}}

% {{{  \section{Introduction}

\section{Introduction}
\label{section:intro}

In order to fully appreciate the subtleties involved and the intricacy of
the compiled assembly statements, we first introduce the garbage collector
in Section~\ref{section:collector}. Section~\ref{section:encoding}
explains the in-memory encoding of \aterms\ in general and of the function
application (\appl) in particular. A detailed description of \aterms\
can be found in~\cite{bjko2000}.

% {{{  \subsection{ATerm Garbage Collector}

\subsection{ATerm Garbage Collector}
\label{section:collector}

The garbage collector used in the \C\ implementation of the \aterms\ is a
so called \emph{mark-sweep} collector. Every object (\aterm) contains a
single bit used by the mark-sweep algorithm to indicate `live' (marked)
objects. At the start of a garbage collection cycle, all objects are
unmarked. The garbage collector tries to locate and mark all live objects
by traversing all terms that are explicitly protected by the programmer
(using the \texttt{ATprotect} API-call), and by scanning the \C\ run-time
stack looking for words that \emph{could} be references to objects. When
such a word is found, the object (as well as the transitive closure of
all objects it refers to) are marked as `live'.

This scan of the run-time stack causes all objects referenced from local
variables to be protected from being garbage collected. Our garbage
collector is a \emph{conservative} collector in the sense that some of
the words on the stack could accidentally have the same bit pattern as
object references. Because there is no way to distinguish these `fake'
bit patterns from `real' object references, this can cause objects to
be marked as `live' when they are actually garbage. Bit patterns on the
stack that do not \emph{point to valid objects} are not traversed at all.
Only when a bit pattern represents an address that is a valid object
address, it is followed to mark the corresponding object.  After all
live objects are marked, a single sweep through the heap is used to
store all objects that are free in separate lists of free objects.

More information on this and other garbage collection techniques is
readily available, e.g. in~\cite[Chapter 13]{App97}.

% }}}
% {{{  \subsection{ATerm Memory Encoding}

\subsection{ATerm Memory Encoding}
\label{section:encoding}

An important issue in the implementation of \aterms\ is how to represent
this data type so that all operations can be performed efficiently in
time and space.

The in-memory encoding of \aterms\ we use is as follows. Assume that one
machine word consists of four bytes. Every \aterm\ object is stored in
two or more machine words. The first byte of the first word is called
the \emph{header} of the object, and consists of the \emph{live}-bit
used during garbage collecting, the term's type, its arity (in case of
a function application), and an \emph{annotation} bit which tells us if
this term has an annotation.

Depending on the type of the node (as determined by the header bits in
the first word) the remaining bytes in the first word contain either a
function symbol, a length indication, or they are unused.

The \emph{second} word is always used for hashing, and links together all
terms in the same hash bucket.

The type of the node determines its exact layout and contents.
Figure~\ref{encoding} is an excerpt from~\cite{bjko2000} showing the
encoding of the function application (called \appl\ for short). As can be
seen in the figure, the location of argument $i$ of an \appl\ is located
at an offset of $i+2$ machine words relative to the start of the term. With
a wordsize of $4$ bytes, this offset equals $4(i+2) = 4i+8$ bytes.

\begin{figure}[!htb]
  \centerline{\epsfig{file=appl-enc.eps,scale=0.6}}
  \caption{\label{encoding}Encoding of the function application (\appl).}
\end{figure}

% }}}

% }}}
% {{{  \section{Into the Trenches}

\section{Into the Trenches}
\label{section:trenches}

This section shows the \gcc{}-compiler in action translating a
\C{}-function that uses \aterms, into its corresponding assembly
statements. In particular, Figure~\ref{fig:asm-diff} shows the difference
in assembly, depending on whether or not the \emph{strength reduction}
optimization was enabled during generation. The generated statements
are in SPARC assembly language for the Solaris operating system, using
version $2.95.2$ of the \gcc\ compiler.

% {{{  \subsection{Understanding the \emph{delay slot}}

\subsection{Understanding the \emph{delay slot}}

Discussing the full richness of the SPARC Assembly Language is out
of this article's scope. However, to help understand the assembly,
we now briefly discuss the notion of a \emph{delay slot}.

Branching instructions on a pipelining machine such as the SPARC are
not resolved until the decoding stage of the pipeline. When the branch
is resolved, another instruction has already been fetched. Instead of
discarding this new instruction if the branch is taken, it is executed
regardless of the branch outcome. From a sequential execution point of
view, one instruction is executed after the branch, before the branch
takes effect. This gives the appearance of the branch being delayed. Such
an instruction is said to be in the \emph{delay slot}.

In other words, keep in mind that the instruction immediately following
a branch or jump instruction is executed regardless of the branch outcome.

% }}}
% {{{  \subsection{Understanding \emph{strength reduction}}

\subsection{Understanding \emph{strength reduction}}

The compiler optimization called \emph{strength reduction} tries to
replace expensive operations such as multiplications and divisions by less
expensive additions and subtractions. In general, strength reduction finds
\emph{induction} variables, assigns their initial value outside (before)
the loop and then updates the value of the induction variable inside the
loop using a simpler computation. A more elaborate discussion on induction
variables and strength reduction, as well as an example of how it can
be applied in a Java compiler, can be found in~\cite[Chapter 17]{App97}.

Figure~\ref{fig:strength-reduction} shows an example of a code
snippet before and after applying strength reduction. It shows how a
multiplication can be eliminated from inside a loop by performing a
single addition each iteration instead. The output is in a numbered,
side-by-side \texttt{diff} style, showing lines which differ by displaying
a \texttt{|} character between them, and indicating lines that occur
only on the left or right side by displaying a \texttt{<} or \texttt{>}
character, respectively. Identical lines do not have any markup.

% {{{  example of strength-reduction.

\begin{figure}[!htb]
\hrulefill
\begin{footnotesize}
\begin{verbatim}
01  before strength reduction       |    after strength reduction
02                                  >    tmp = 0;
03  for (i=0; i<100; i++) {              for (i=0; i<100; i++) {
04    a[i] = j * i;                 |      a[i] = tmp;
05                                  >      tmp = tmp + j;
06  }                                    }
\end{verbatim}
\end{footnotesize}
  \caption{
    \label{fig:strength-reduction}
    Example of strength reduction.
  }
\end{figure}

% }}}

% }}}

% {{{  \subsection{A closeup example}

\subsection{A closeup example}

We present a snippet of \C-code, taken from the \aterm{}-ToolBus
library. The code iterates over the arguments of an \appl{} (variable
\texttt{appl}) in \emph{reverse} order, building up an \atlist{}
(variable \texttt{list}) by invoking some arbitrary function (in this
case \texttt{ATBunpack}) on each of these arguments and inserting the
result in \texttt{list}. The variable \texttt{arity} holds the arity
of \texttt{appl}.

% {{{  C-code of the ATBunpack loop example.

\begin{figure}[!htb]
\hrulefill
\begin{footnotesize}
\begin{verbatim}
01  ATermList list = ATempty;
02
03  for (i = arity; i >= 0; i--) {
04    list = ATinsert(list, ATBunpack(ATgetArgument(appl, i)));
05  }
\end{verbatim}
\end{footnotesize}
\caption{
  \label{fig:atb-tool}
  \texttt{C}-source of the snippet which was the target of strength reduction.
}
\end{figure}

% }}}

The SPARC assembly code as generated by \gcc\ is shown in
Figure~\ref{fig:asm-diff}. The corresponding \C{}-statements have been
inserted in comment-notation (lines starting with \verb+%%+) for clarity.
Moreover, all instructions that are in a \emph{delay slot} have been
marked with \verb+!!+ to alert the reader that they are executed
regardless of the outcome of the preceding branch-instruction.

% {{{  Assembly diff before and after strength-reduction

\begin{figure}[!htb]
\hrulefill
\begin{footnotesize}
\verbatiminput{asm-diff.ltx}
\end{footnotesize}
\caption{
  \label{fig:asm-diff}
  Assembly \emph{before} (L) and \emph{after} (R) strength reduction.
}
\hrulefill
\end{figure}

% }}}

The \texttt{ATgetArgument} function is implemented as a macro for
efficiency reasons, exploiting the knowledge that a specific argument
of an \appl\ can be found at a particular offset relative to the start
of the term itself (See~\ref{section:encoding}). Because it is a macro,
its definition gets expanded inline, without the overhead of setting up
a new stackframe and invoking another \C{}-function.

Recall from Section~\ref{section:encoding} that the memory location of
argument $i$ of an \appl\ is located at byte-offset $4i+8$ relative to
the start of the term.

In the ``expensive'' version, the computation of the address of argument
$i$ is done by left-shifting $i$ twice (line 16) and adding the address
of the start of the application (line 17). The addition of the constant
offset $8$ is done when the value of argument $i$ is retrieved (line
19). This version is expensive because it computes $4i+8$ during each
iteration of the loop.

After applying strength reduction, we see that the computation of $4i+8$
has been pulled out of the loop and is only performed once (lines 11-13).
The value of argument $i$ of the \appl\ is now retrieved without extra
computations (line 19). At the end of each iteration, the ``pointer''
to the current argument is updated by a simple subtraction (line 27),
effectively moving it towards the beginning of the array of arguments.

A vigilant reader will have noticed one crucial semantic difference.
The ``expensive'' variant keeps a reference to the \emph{start of} the
term in register \verb|%i0| whereas after applying strength reduction,
this reference is lost. It has been replaced by a reference to the
\emph{current argument} being processed in the loop.

Unfortunately for our garbage collector, this was the \emph{only}
reference to the term that is manipulated in this function! Moreover,
these particular statements invoke \emph{term creation} (by calling
\texttt{ATinsert} in line 21). Each term creation can result in the
garbage collector being activated to clean up \emph{unused} terms as
explained in Section~\ref{section:collector}. Because there is \emph{no}
reference to the \emph{start of} the term being manipulated anymore,
the collector will conclude it is safe to clean it up. Obviously, this
behaviour is highly undesirable.

% Useful, or BLAH?
%
%Cleaning up a term that is in use and re-dispensing it as a free
%term causes all sorts of weird things. In our case we ended up with a
%\emph{funny} term much later in the execution of our program. Tracing
%the erroneous output and finding out what exactly went wrong, turned
%out to be a serious operation...

% }}}
% {{{  \subsection{Repairing the leak}

\subsection{Repairing the leak}
\label{section:repairing}

After spending a considerable amount of time debugging and finally
realizing what exactly was the problem, repairing the bug turned
out to be relatively easy. The ATerm Garbage Collector was just not
\emph{conservative} enough. Bit patterns on the stack (or in registers)
pointing to an ATerm cause that particular term (and its children) to be
protected from collection. But now we have the case where we only have
a reference to a child, but should still protect the ``surrounding''
ATerm as well.

Fortunately we allocate memory for ATerms of a particular size in separate
blocks. This enables us to find the start of an ATerm containing another
ATerm (as is the case when we need to find the address of an \appl\
given the address of one of its arguments), using modulo and subtraction
arithmetic.

%% IMPROVE ME
%%Generic garbage collectors, e.g. \texttt{FIXME:Boehm}, do not usually
%%have such ``specific size'' blocks. They need to place markers between
%%allocated structures and walk backwards through the heap to find the
%%marker, at which point the structure containing the child is located.

% }}}

% }}}
% {{{  \section{Conclusions and Future Hazards}

\section{Conclusions and Future Hazards}
\label{conclusions}

Writing a conservative garbage collector in \C\ is a fine art. Not only
do you need to know exactly how memory is managed, how to traverse the
program's stack, inspect the heap and salvage information stored only
in obscure registers, you also need to have a solid understanding of
the compiler you use and the various optimizations that might play a
role in undermining the hypotheses the garbage collector is based on.

In our case, the ATerm Garbage Collector had been in use for two years
before this bug became apparent, and only because some heuristic in \gcc\
was improved, resulting in the strength reduction optimization being
applied to a particular function which it previously ignored.

\texttt{TODO: Future Hazards} What if strength reduction starts beyond
the end of the term and updates the pointer first thing in the loop, but
after a (disjoint) ATerm creation is done?

% }}}
% {{{  \section{References}

\section{References}
\label{section:references}

\bibliographystyle{alpha}
\bibliography{thesis}

% }}}

\end{document}
