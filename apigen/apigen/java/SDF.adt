


[ 


[ 

Symbol
, 
start
, 
appl ( 

prod ( 

id ( 


"Sdf2-Syntax" )
, 
w ( 


"" )
, 

[ 

ql ( 


"<START>" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"Symbol" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

l ( 


"<START>" ) ] ) ]
, 

[ 

Symbol
, 
file-start
, 
appl ( 

prod ( 

id ( 


"Sdf2-Syntax" )
, 
w ( 


"" )
, 

[ 

ql ( 


"<Start>" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"Symbol" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

l ( 


"<Start>" ) ] ) ]
, 

[ 

Grammar
, 
lexical-priorities
, 
appl ( 

prod ( 

id ( 


"Sdf2-Syntax" )
, 
w ( 


"" )
, 

[ 

ql ( 


"lexical" )
, 
w ( 


"" )
, 
ql ( 


"priorities" )
, 
w ( 


"" )
, 
sort ( 


"Priorities" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"Grammar" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

l ( 


"lexical" )
, 
w ( 

< 

"ws-after-lexical" ( 

str ) > )
, 
l ( 


"priorities" )
, 
w ( 

< 

"ws-after-priorities" ( 

str ) > )
, 
< 
Priorities ( 

Priorities ) > ] ) ]
, 

[ 

Grammar
, 
context-free-priorities
, 
appl ( 

prod ( 

id ( 


"Sdf2-Syntax" )
, 
w ( 


"" )
, 

[ 

ql ( 


"context-free" )
, 
w ( 


"" )
, 
ql ( 


"priorities" )
, 
w ( 


"" )
, 
sort ( 


"Priorities" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"Grammar" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

l ( 


"context-free" )
, 
w ( 

< 

"ws-after-context-free" ( 

str ) > )
, 
l ( 


"priorities" )
, 
w ( 

< 

"ws-after-priorities" ( 

str ) > )
, 
< 
Priorities ( 

Priorities ) > ] ) ]
, 

[ 

Grammar
, 
lexical-restrictions
, 
appl ( 

prod ( 

id ( 


"Sdf2-Syntax" )
, 
w ( 


"" )
, 

[ 

ql ( 


"lexical" )
, 
w ( 


"" )
, 
ql ( 


"restrictions" )
, 
w ( 


"" )
, 
sort ( 


"Restrictions" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"Grammar" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

l ( 


"lexical" )
, 
w ( 

< 

"ws-after-lexical" ( 

str ) > )
, 
l ( 


"restrictions" )
, 
w ( 

< 

"ws-after-restrictions" ( 

str ) > )
, 
< 
Restrictions ( 

Restrictions ) > ] ) ]
, 

[ 

Grammar
, 
context-free-restrictions
, 
appl ( 

prod ( 

id ( 


"Sdf2-Syntax" )
, 
w ( 


"" )
, 

[ 

ql ( 


"context-free" )
, 
w ( 


"" )
, 
ql ( 


"restrictions" )
, 
w ( 


"" )
, 
sort ( 


"Restrictions" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"Grammar" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

l ( 


"context-free" )
, 
w ( 

< 

"ws-after-context-free" ( 

str ) > )
, 
l ( 


"restrictions" )
, 
w ( 

< 

"ws-after-restrictions" ( 

str ) > )
, 
< 
Restrictions ( 

Restrictions ) > ] ) ]
, 

[ 

SDF
, 
definition
, 
appl ( 

prod ( 

id ( 


"Sdf2-Syntax" )
, 
w ( 


"" )
, 

[ 

ql ( 


"definition" )
, 
w ( 


"" )
, 
sort ( 


"Definition" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"SDF" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

l ( 


"definition" )
, 
w ( 

< 

"ws-after-definition" ( 

str ) > )
, 
< 
Definition ( 

Definition ) > ] ) ]
, 

[ 

Attributes
, 
attrs
, 
appl ( 

prod ( 

id ( 


"Kernel-Sdf-Syntax" )
, 
w ( 


"" )
, 

[ 

ql ( 


"{" )
, 
w ( 


"" )
, 
iter-sep ( 

l ( 


"{" )
, 
w ( 


"" )
, 
sort ( 


"Attribute" )
, 
w ( 


"" )
, 
ql ( 


"," )
, 
w ( 


"" )
, 
l ( 


"}" )
, 
w ( 


"" )
, 
l ( 


"*" ) )
, 
w ( 


"" )
, 
ql ( 


"}" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"Attributes" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

l ( 


"{" )
, 
w ( 

< 

"ws-after-{" ( 

str ) > )
, 
list ( 

iter-sep ( 

l ( 


"{" )
, 
w ( 


"" )
, 
sort ( 


"Attribute" )
, 
w ( 


"" )
, 
ql ( 


"," )
, 
w ( 


"" )
, 
l ( 


"}" )
, 
w ( 


"" )
, 
l ( 


"*" ) )
, 
w ( 


"" )
, 
< 
list ( 

Attribute-list ) > )
, 
w ( 

< 
ws-after-list ( 

str ) > )
, 
l ( 


"}" ) ] ) ]
, 

[ 

Attribute-list
, 
empty
, 

[ 
 ] ]
, 

[ 

Attribute-list
, 
single
, 

[ 

< 
head ( 

Attribute ) > ] ]
, 

[ 

Attribute-list
, 
many
, 

[ 

< 
head ( 

Attribute ) >
, 
w ( 

< 
ws-after-first ( 

str ) > )
, 
sep ( 

< 
sep ( 

str ) > )
, 
w ( 

< 
ws-after-sep ( 

str ) > )
, 
< 

[ 

tail ( 

Attribute-list ) ] > ] ]
, 

[ 

Attributes
, 
no-attrs
, 
appl ( 

prod ( 

id ( 


"Kernel-Sdf-Syntax" )
, 
w ( 


"" )
, 

[ 
 ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"Attributes" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 
 ] ) ]
, 

[ 

Production
, 
prod
, 
appl ( 

prod ( 

id ( 


"Kernel-Sdf-Syntax" )
, 
w ( 


"" )
, 

[ 

sort ( 


"Symbols" )
, 
w ( 


"" )
, 
ql ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"Symbol" )
, 
w ( 


"" )
, 
sort ( 


"Attributes" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"Production" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

< 
Symbols ( 

Symbols ) >
, 
w ( 

< 
ws-after-Symbols ( 

str ) > )
, 
l ( 


"->" )
, 
w ( 

< 

"ws-after-->" ( 

str ) > )
, 
< 
result ( 

Symbol ) >
, 
w ( 

< 
ws-after-result ( 

str ) > )
, 
< 
Attributes ( 

Attributes ) > ] ) ]
, 

[ 

Productions
, 
Default
, 
appl ( 

prod ( 

id ( 


"Kernel-Sdf-Syntax" )
, 
w ( 


"" )
, 

[ 

iter ( 

sort ( 


"Production" )
, 
w ( 


"" )
, 
l ( 


"*" ) ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"Productions" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

list ( 

iter ( 

sort ( 


"Production" )
, 
w ( 


"" )
, 
l ( 


"*" ) )
, 
w ( 


"" )
, 
< 
list ( 

Production-list ) > ) ] ) ]
, 

[ 

Production-list
, 
empty
, 

[ 
 ] ]
, 

[ 

Production-list
, 
single
, 

[ 

< 
head ( 

Production ) > ] ]
, 

[ 

Production-list
, 
many
, 

[ 

< 
head ( 

Production ) >
, 
w ( 

< 
ws-after-first ( 

str ) > )
, 
< 

[ 

tail ( 

Production-list ) ] > ] ]
, 

[ 

Grammar
, 
syntax
, 
appl ( 

prod ( 

id ( 


"Kernel-Sdf-Syntax" )
, 
w ( 


"" )
, 

[ 

ql ( 


"syntax" )
, 
w ( 


"" )
, 
sort ( 


"Productions" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"Grammar" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

l ( 


"syntax" )
, 
w ( 

< 

"ws-after-syntax" ( 

str ) > )
, 
< 
Productions ( 

Productions ) > ] ) ]
, 

[ 

Grammar
, 
lexical-syntax
, 
appl ( 

prod ( 

id ( 


"Basic-Sdf-Syntax" )
, 
w ( 


"" )
, 

[ 

ql ( 


"lexical" )
, 
w ( 


"" )
, 
ql ( 


"syntax" )
, 
w ( 


"" )
, 
sort ( 


"Productions" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"Grammar" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

l ( 


"lexical" )
, 
w ( 

< 

"ws-after-lexical" ( 

str ) > )
, 
l ( 


"syntax" )
, 
w ( 

< 

"ws-after-syntax" ( 

str ) > )
, 
< 
Productions ( 

Productions ) > ] ) ]
, 

[ 

Grammar
, 
context-free-syntax
, 
appl ( 

prod ( 

id ( 


"Basic-Sdf-Syntax" )
, 
w ( 


"" )
, 

[ 

ql ( 


"context-free" )
, 
w ( 


"" )
, 
ql ( 


"syntax" )
, 
w ( 


"" )
, 
sort ( 


"Productions" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"Grammar" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

l ( 


"context-free" )
, 
w ( 

< 

"ws-after-context-free" ( 

str ) > )
, 
l ( 


"syntax" )
, 
w ( 

< 

"ws-after-syntax" ( 

str ) > )
, 
< 
Productions ( 

Productions ) > ] ) ]
, 

[ 

Grammar
, 
variables
, 
appl ( 

prod ( 

id ( 


"Basic-Sdf-Syntax" )
, 
w ( 


"" )
, 

[ 

ql ( 


"variables" )
, 
w ( 


"" )
, 
sort ( 


"Productions" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"Grammar" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

l ( 


"variables" )
, 
w ( 

< 

"ws-after-variables" ( 

str ) > )
, 
< 
Productions ( 

Productions ) > ] ) ]
, 

[ 

Grammar
, 
lexical-variables
, 
appl ( 

prod ( 

id ( 


"Basic-Sdf-Syntax" )
, 
w ( 


"" )
, 

[ 

ql ( 


"lexical" )
, 
w ( 


"" )
, 
ql ( 


"variables" )
, 
w ( 


"" )
, 
sort ( 


"Productions" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"Grammar" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

l ( 


"lexical" )
, 
w ( 

< 

"ws-after-lexical" ( 

str ) > )
, 
l ( 


"variables" )
, 
w ( 

< 

"ws-after-variables" ( 

str ) > )
, 
< 
Productions ( 

Productions ) > ] ) ]
, 

[ 

Symbol
, 
cf
, 
appl ( 

prod ( 

id ( 


"Basic-Sdf-Syntax" )
, 
w ( 


"" )
, 

[ 

ql ( 


"<" )
, 
w ( 


"" )
, 
sort ( 


"Symbol" )
, 
w ( 


"" )
, 
ql ( 


"-CF" )
, 
w ( 


"" )
, 
ql ( 


">" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"Symbol" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

l ( 


"<" )
, 
w ( 

< 

"ws-after-<" ( 

str ) > )
, 
< 
Symbol ( 

Symbol ) >
, 
w ( 

< 
ws-after-Symbol ( 

str ) > )
, 
l ( 


"-CF" )
, 
w ( 

< 

"ws-after--CF" ( 

str ) > )
, 
l ( 


">" ) ] ) ]
, 

[ 

Symbol
, 
lex
, 
appl ( 

prod ( 

id ( 


"Basic-Sdf-Syntax" )
, 
w ( 


"" )
, 

[ 

ql ( 


"<" )
, 
w ( 


"" )
, 
sort ( 


"Symbol" )
, 
w ( 


"" )
, 
ql ( 


"-LEX" )
, 
w ( 


"" )
, 
ql ( 


">" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"Symbol" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

l ( 


"<" )
, 
w ( 

< 

"ws-after-<" ( 

str ) > )
, 
< 
Symbol ( 

Symbol ) >
, 
w ( 

< 
ws-after-Symbol ( 

str ) > )
, 
l ( 


"-LEX" )
, 
w ( 

< 

"ws-after--LEX" ( 

str ) > )
, 
l ( 


">" ) ] ) ]
, 

[ 

Symbol
, 
varsym
, 
appl ( 

prod ( 

id ( 


"Basic-Sdf-Syntax" )
, 
w ( 


"" )
, 

[ 

ql ( 


"<" )
, 
w ( 


"" )
, 
sort ( 


"Symbol" )
, 
w ( 


"" )
, 
ql ( 


"-VAR" )
, 
w ( 


"" )
, 
ql ( 


">" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"Symbol" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

l ( 


"<" )
, 
w ( 

< 

"ws-after-<" ( 

str ) > )
, 
< 
Symbol ( 

Symbol ) >
, 
w ( 

< 
ws-after-Symbol ( 

str ) > )
, 
l ( 


"-VAR" )
, 
w ( 

< 

"ws-after--VAR" ( 

str ) > )
, 
l ( 


">" ) ] ) ]
, 

[ 

Symbol
, 
layout
, 
appl ( 

prod ( 

id ( 


"Basic-Sdf-Syntax" )
, 
w ( 


"" )
, 

[ 

ql ( 


"LAYOUT" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"Symbol" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

l ( 


"LAYOUT" ) ] ) ]
, 

[ 

ModuleWord
, 
word
, 
lex ( 

< 
lex ( 

str ) >
, 
sort ( 


"ModuleWord" ) ) ]
, 

[ 

ModuleId
, 
word
, 
lex ( 

< 
lex ( 

str ) >
, 
sort ( 


"ModuleId" ) ) ]
, 

[ 

ModuleId
, 
slash-word
, 
lex ( 

< 
lex ( 

str ) >
, 
sort ( 


"ModuleId" ) ) ]
, 

[ 

ModuleId
, 
word-slash-word
, 
lex ( 

< 
lex ( 

str ) >
, 
sort ( 


"ModuleId" ) ) ]
, 

[ 

Definition
, 
Default
, 
appl ( 

prod ( 

id ( 


"Modular-Sdf-Syntax" )
, 
w ( 


"" )
, 

[ 

iter ( 

sort ( 


"Module" )
, 
w ( 


"" )
, 
l ( 


"*" ) ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"Definition" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

list ( 

iter ( 

sort ( 


"Module" )
, 
w ( 


"" )
, 
l ( 


"*" ) )
, 
w ( 


"" )
, 
< 
list ( 

Module-list ) > ) ] ) ]
, 

[ 

Module-list
, 
empty
, 

[ 
 ] ]
, 

[ 

Module-list
, 
single
, 

[ 

< 
head ( 

Module ) > ] ]
, 

[ 

Module-list
, 
many
, 

[ 

< 
head ( 

Module ) >
, 
w ( 

< 
ws-after-first ( 

str ) > )
, 
< 

[ 

tail ( 

Module-list ) ] > ] ]
, 

[ 

Module
, 
module
, 
appl ( 

prod ( 

id ( 


"Modular-Sdf-Syntax" )
, 
w ( 


"" )
, 

[ 

ql ( 


"module" )
, 
w ( 


"" )
, 
sort ( 


"ModuleName" )
, 
w ( 


"" )
, 
iter ( 

sort ( 


"ImpSection" )
, 
w ( 


"" )
, 
l ( 


"*" ) )
, 
w ( 


"" )
, 
sort ( 


"Sections" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"Module" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

l ( 


"module" )
, 
w ( 

< 

"ws-after-module" ( 

str ) > )
, 
< 
ModuleName ( 

ModuleName ) >
, 
w ( 

< 
ws-after-ModuleName ( 

str ) > )
, 
list ( 

iter ( 

sort ( 


"ImpSection" )
, 
w ( 


"" )
, 
l ( 


"*" ) )
, 
w ( 


"" )
, 
< 
list ( 

ImpSection-list ) > )
, 
w ( 

< 
ws-after-list ( 

str ) > )
, 
< 
Sections ( 

Sections ) > ] ) ]
, 

[ 

ImpSection-list
, 
empty
, 

[ 
 ] ]
, 

[ 

ImpSection-list
, 
single
, 

[ 

< 
head ( 

ImpSection ) > ] ]
, 

[ 

ImpSection-list
, 
many
, 

[ 

< 
head ( 

ImpSection ) >
, 
w ( 

< 
ws-after-first ( 

str ) > )
, 
< 

[ 

tail ( 

ImpSection-list ) ] > ] ]
, 

[ 

Section
, 
exports
, 
appl ( 

prod ( 

id ( 


"Modular-Sdf-Syntax" )
, 
w ( 


"" )
, 

[ 

ql ( 


"exports" )
, 
w ( 


"" )
, 
sort ( 


"Grammar" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"Section" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

l ( 


"exports" )
, 
w ( 

< 

"ws-after-exports" ( 

str ) > )
, 
< 
Grammar ( 

Grammar ) > ] ) ]
, 

[ 

Section
, 
hiddens
, 
appl ( 

prod ( 

id ( 


"Modular-Sdf-Syntax" )
, 
w ( 


"" )
, 

[ 

ql ( 


"hiddens" )
, 
w ( 


"" )
, 
sort ( 


"Grammar" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"Section" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

l ( 


"hiddens" )
, 
w ( 

< 

"ws-after-hiddens" ( 

str ) > )
, 
< 
Grammar ( 

Grammar ) > ] ) ]
, 

[ 

Sections
, 
Default
, 
appl ( 

prod ( 

id ( 


"Modular-Sdf-Syntax" )
, 
w ( 


"" )
, 

[ 

iter ( 

sort ( 


"Section" )
, 
w ( 


"" )
, 
l ( 


"*" ) ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"Sections" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

list ( 

iter ( 

sort ( 


"Section" )
, 
w ( 


"" )
, 
l ( 


"*" ) )
, 
w ( 


"" )
, 
< 
list ( 

Section-list ) > ) ] ) ]
, 

[ 

Section-list
, 
empty
, 

[ 
 ] ]
, 

[ 

Section-list
, 
single
, 

[ 

< 
head ( 

Section ) > ] ]
, 

[ 

Section-list
, 
many
, 

[ 

< 
head ( 

Section ) >
, 
w ( 

< 
ws-after-first ( 

str ) > )
, 
< 

[ 

tail ( 

Section-list ) ] > ] ]
, 

[ 

ModuleName
, 
unparameterized
, 
appl ( 

prod ( 

id ( 


"Modular-Sdf-Syntax" )
, 
w ( 


"" )
, 

[ 

sort ( 


"ModuleId" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"ModuleName" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

< 
ModuleId ( 

ModuleId ) > ] ) ]
, 

[ 

ModuleName
, 
parameterized
, 
appl ( 

prod ( 

id ( 


"Modular-Sdf-Syntax" )
, 
w ( 


"" )
, 

[ 

sort ( 


"ModuleId" )
, 
w ( 


"" )
, 
ql ( 


"[" )
, 
w ( 


"" )
, 
sort ( 


"Symbols" )
, 
w ( 


"" )
, 
ql ( 


"]" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"ModuleName" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

< 
ModuleId ( 

ModuleId ) >
, 
w ( 

< 
ws-after-ModuleId ( 

str ) > )
, 
l ( 


"[" )
, 
w ( 

< 

"ws-after-[" ( 

str ) > )
, 
< 
params ( 

Symbols ) >
, 
w ( 

< 
ws-after-params ( 

str ) > )
, 
l ( 


"]" ) ] ) ]
, 

[ 

Attribute
, 
id
, 
appl ( 

prod ( 

id ( 


"Modular-Sdf-Syntax" )
, 
w ( 


"" )
, 

[ 

ql ( 


"id" )
, 
w ( 


"" )
, 
ql ( 


"(" )
, 
w ( 


"" )
, 
sort ( 


"ModuleName" )
, 
w ( 


"" )
, 
ql ( 


")" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"Attribute" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

l ( 


"id" )
, 
w ( 

< 

"ws-after-id" ( 

str ) > )
, 
l ( 


"(" )
, 
w ( 

< 

"ws-after-(" ( 

str ) > )
, 
< 
ModuleName ( 

ModuleName ) >
, 
w ( 

< 
ws-after-ModuleName ( 

str ) > )
, 
l ( 


")" ) ] ) ]
, 

[ 

ImpSection
, 
imports
, 
appl ( 

prod ( 

id ( 


"Modular-Sdf-Syntax" )
, 
w ( 


"" )
, 

[ 

ql ( 


"imports" )
, 
w ( 


"" )
, 
sort ( 


"Imports" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"ImpSection" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

l ( 


"imports" )
, 
w ( 

< 

"ws-after-imports" ( 

str ) > )
, 
< 
list ( 

Imports ) > ] ) ]
, 

[ 

Grammar
, 
imp-section
, 
appl ( 

prod ( 

id ( 


"Modular-Sdf-Syntax" )
, 
w ( 


"" )
, 

[ 

sort ( 


"ImpSection" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"Grammar" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

< 
ImpSection ( 

ImpSection ) > ] ) ]
, 

[ 

Imports
, 
Default
, 
appl ( 

prod ( 

id ( 


"Modular-Sdf-Syntax" )
, 
w ( 


"" )
, 

[ 

iter ( 

sort ( 


"Import" )
, 
w ( 


"" )
, 
l ( 


"*" ) ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"Imports" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

list ( 

iter ( 

sort ( 


"Import" )
, 
w ( 


"" )
, 
l ( 


"*" ) )
, 
w ( 


"" )
, 
< 
list ( 

Import-list ) > ) ] ) ]
, 

[ 

Import-list
, 
empty
, 

[ 
 ] ]
, 

[ 

Import-list
, 
single
, 

[ 

< 
head ( 

Import ) > ] ]
, 

[ 

Import-list
, 
many
, 

[ 

< 
head ( 

Import ) >
, 
w ( 

< 
ws-after-first ( 

str ) > )
, 
< 

[ 

tail ( 

Import-list ) ] > ] ]
, 

[ 

Import
, 
module
, 
appl ( 

prod ( 

id ( 


"Modular-Sdf-Syntax" )
, 
w ( 


"" )
, 

[ 

sort ( 


"ModuleName" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"Import" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

< 
ModuleName ( 

ModuleName ) > ] ) ]
, 

[ 

Import
, 
renamed-module
, 
appl ( 

prod ( 

id ( 


"Modular-Sdf-Syntax" )
, 
w ( 


"" )
, 

[ 

sort ( 


"ModuleName" )
, 
w ( 


"" )
, 
sort ( 


"Renamings" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"Import" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

< 
ModuleName ( 

ModuleName ) >
, 
w ( 

< 
ws-after-ModuleName ( 

str ) > )
, 
< 
Renamings ( 

Renamings ) > ] ) ]
, 

[ 

Import
, 
Bracket
, 
appl ( 

prod ( 

id ( 


"Modular-Sdf-Syntax" )
, 
w ( 


"" )
, 

[ 

ql ( 


"(" )
, 
w ( 


"" )
, 
sort ( 


"Import" )
, 
w ( 


"" )
, 
ql ( 


")" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"Import" )
, 
w ( 


"" )
, 
attrs ( 

l ( 


"{" )
, 
w ( 


"" )
, 

[ 

l ( 


"bracket" ) ]
, 
w ( 


"" )
, 
l ( 


"}" ) ) )
, 
w ( 


"" )
, 

[ 

l ( 


"(" )
, 
w ( 

< 

"ws-after-(" ( 

str ) > )
, 
< 
Import ( 

Import ) >
, 
w ( 

< 
ws-after-Import ( 

str ) > )
, 
l ( 


")" ) ] ) ]
, 

[ 

Symbol
, 
empty
, 
appl ( 

prod ( 

id ( 


"Regular-Sdf-Syntax" )
, 
w ( 


"" )
, 

[ 

ql ( 


"(" )
, 
w ( 


"" )
, 
ql ( 


")" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"Symbol" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

l ( 


"(" )
, 
w ( 

< 

"ws-after-(" ( 

str ) > )
, 
l ( 


")" ) ] ) ]
, 

[ 

Symbol
, 
seq
, 
appl ( 

prod ( 

id ( 


"Regular-Sdf-Syntax" )
, 
w ( 


"" )
, 

[ 

ql ( 


"(" )
, 
w ( 


"" )
, 
sort ( 


"Symbol" )
, 
w ( 


"" )
, 
iter ( 

sort ( 


"Symbol" )
, 
w ( 


"" )
, 
l ( 


"+" ) )
, 
w ( 


"" )
, 
ql ( 


")" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"Symbol" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

l ( 


"(" )
, 
w ( 

< 

"ws-after-(" ( 

str ) > )
, 
< 
head ( 

Symbol ) >
, 
w ( 

< 
ws-after-head ( 

str ) > )
, 
list ( 

iter ( 

sort ( 


"Symbol" )
, 
w ( 


"" )
, 
l ( 


"*" ) )
, 
w ( 


"" )
, 
< 
tail ( 

Symbol-tail ) > )
, 
w ( 

< 
ws-after-tail ( 

str ) > )
, 
l ( 


")" ) ] ) ]
, 

[ 

Symbol-tail
, 
single
, 

[ 

< 
head ( 

Symbol ) > ] ]
, 

[ 

Symbol-tail
, 
many
, 

[ 

< 
head ( 

Symbol ) >
, 
w ( 

< 
ws-after-first ( 

str ) > )
, 
< 

[ 

tail ( 

Symbol-tail ) ] > ] ]
, 

[ 

Symbol
, 
opt
, 
appl ( 

prod ( 

id ( 


"Regular-Sdf-Syntax" )
, 
w ( 


"" )
, 

[ 

sort ( 


"Symbol" )
, 
w ( 


"" )
, 
ql ( 


"?" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"Symbol" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

< 
Symbol ( 

Symbol ) >
, 
w ( 

< 
ws-after-Symbol ( 

str ) > )
, 
l ( 


"?" ) ] ) ]
, 

[ 

Symbol
, 
iter
, 
appl ( 

prod ( 

id ( 


"Regular-Sdf-Syntax" )
, 
w ( 


"" )
, 

[ 

sort ( 


"Symbol" )
, 
w ( 


"" )
, 
ql ( 


"+" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"Symbol" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

< 
Symbol ( 

Symbol ) >
, 
w ( 

< 
ws-after-Symbol ( 

str ) > )
, 
l ( 


"+" ) ] ) ]
, 

[ 

Symbol
, 
iter-star
, 
appl ( 

prod ( 

id ( 


"Regular-Sdf-Syntax" )
, 
w ( 


"" )
, 

[ 

sort ( 


"Symbol" )
, 
w ( 


"" )
, 
ql ( 


"*" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"Symbol" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

< 
Symbol ( 

Symbol ) >
, 
w ( 

< 
ws-after-Symbol ( 

str ) > )
, 
l ( 


"*" ) ] ) ]
, 

[ 

Symbol
, 
iter-sep
, 
appl ( 

prod ( 

id ( 


"Regular-Sdf-Syntax" )
, 
w ( 


"" )
, 

[ 

ql ( 


"{" )
, 
w ( 


"" )
, 
sort ( 


"Symbol" )
, 
w ( 


"" )
, 
sort ( 


"Symbol" )
, 
w ( 


"" )
, 
ql ( 


"}" )
, 
w ( 


"" )
, 
ql ( 


"+" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"Symbol" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

l ( 


"{" )
, 
w ( 

< 

"ws-after-{" ( 

str ) > )
, 
< 
Symbol ( 

Symbol ) >
, 
w ( 

< 
ws-after-Symbol ( 

str ) > )
, 
< 
sep ( 

Symbol ) >
, 
w ( 

< 
ws-after-sep ( 

str ) > )
, 
l ( 


"}" )
, 
w ( 

< 

"ws-after-}" ( 

str ) > )
, 
l ( 


"+" ) ] ) ]
, 

[ 

Symbol
, 
iter-star-sep
, 
appl ( 

prod ( 

id ( 


"Regular-Sdf-Syntax" )
, 
w ( 


"" )
, 

[ 

ql ( 


"{" )
, 
w ( 


"" )
, 
sort ( 


"Symbol" )
, 
w ( 


"" )
, 
sort ( 


"Symbol" )
, 
w ( 


"" )
, 
ql ( 


"}" )
, 
w ( 


"" )
, 
ql ( 


"*" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"Symbol" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

l ( 


"{" )
, 
w ( 

< 

"ws-after-{" ( 

str ) > )
, 
< 
Symbol ( 

Symbol ) >
, 
w ( 

< 
ws-after-Symbol ( 

str ) > )
, 
< 
sep ( 

Symbol ) >
, 
w ( 

< 
ws-after-sep ( 

str ) > )
, 
l ( 


"}" )
, 
w ( 

< 

"ws-after-}" ( 

str ) > )
, 
l ( 


"*" ) ] ) ]
, 

[ 

Symbol
, 
iter-n
, 
appl ( 

prod ( 

id ( 


"Regular-Sdf-Syntax" )
, 
w ( 


"" )
, 

[ 

sort ( 


"Symbol" )
, 
w ( 


"" )
, 
sort ( 


"NatCon" )
, 
w ( 


"" )
, 
ql ( 


"+" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"Symbol" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

< 
Symbol ( 

Symbol ) >
, 
w ( 

< 
ws-after-Symbol ( 

str ) > )
, 
< 
n ( 

NatCon ) >
, 
w ( 

< 
ws-after-n ( 

str ) > )
, 
l ( 


"+" ) ] ) ]
, 

[ 

Symbol
, 
iter-sep-n
, 
appl ( 

prod ( 

id ( 


"Regular-Sdf-Syntax" )
, 
w ( 


"" )
, 

[ 

ql ( 


"{" )
, 
w ( 


"" )
, 
sort ( 


"Symbol" )
, 
w ( 


"" )
, 
sort ( 


"Symbol" )
, 
w ( 


"" )
, 
ql ( 


"}" )
, 
w ( 


"" )
, 
sort ( 


"NatCon" )
, 
w ( 


"" )
, 
ql ( 


"+" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"Symbol" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

l ( 


"{" )
, 
w ( 

< 

"ws-after-{" ( 

str ) > )
, 
< 
Symbol ( 

Symbol ) >
, 
w ( 

< 
ws-after-Symbol ( 

str ) > )
, 
< 
sep ( 

Symbol ) >
, 
w ( 

< 
ws-after-sep ( 

str ) > )
, 
l ( 


"}" )
, 
w ( 

< 

"ws-after-}" ( 

str ) > )
, 
< 
n ( 

NatCon ) >
, 
w ( 

< 
ws-after-n ( 

str ) > )
, 
l ( 


"+" ) ] ) ]
, 

[ 

Symbol
, 
set
, 
appl ( 

prod ( 

id ( 


"Regular-Sdf-Syntax" )
, 
w ( 


"" )
, 

[ 

ql ( 


"Set" )
, 
w ( 


"" )
, 
ql ( 


"[" )
, 
w ( 


"" )
, 
sort ( 


"Symbol" )
, 
w ( 


"" )
, 
ql ( 


"]" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"Symbol" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

l ( 


"Set" )
, 
w ( 

< 

"ws-after-Set" ( 

str ) > )
, 
l ( 


"[" )
, 
w ( 

< 

"ws-after-[" ( 

str ) > )
, 
< 
Symbol ( 

Symbol ) >
, 
w ( 

< 
ws-after-Symbol ( 

str ) > )
, 
l ( 


"]" ) ] ) ]
, 

[ 

Symbol
, 
pair
, 
appl ( 

prod ( 

id ( 


"Regular-Sdf-Syntax" )
, 
w ( 


"" )
, 

[ 

sort ( 


"Symbol" )
, 
w ( 


"" )
, 
ql ( 


"#" )
, 
w ( 


"" )
, 
sort ( 


"Symbol" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"Symbol" )
, 
w ( 


"" )
, 
attrs ( 

l ( 


"{" )
, 
w ( 


"" )
, 

[ 

l ( 


"right" ) ]
, 
w ( 


"" )
, 
l ( 


"}" ) ) )
, 
w ( 


"" )
, 

[ 

< 
left ( 

Symbol ) >
, 
w ( 

< 
ws-after-left ( 

str ) > )
, 
l ( 


"#" )
, 
w ( 

< 

"ws-after-#" ( 

str ) > )
, 
< 
right ( 

Symbol ) > ] ) ]
, 

[ 

Symbol
, 
func
, 
appl ( 

prod ( 

id ( 


"Regular-Sdf-Syntax" )
, 
w ( 


"" )
, 

[ 

ql ( 


"(" )
, 
w ( 


"" )
, 
sort ( 


"Symbols" )
, 
w ( 


"" )
, 
ql ( 


"=>" )
, 
w ( 


"" )
, 
sort ( 


"Symbol" )
, 
w ( 


"" )
, 
ql ( 


")" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"Symbol" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

l ( 


"(" )
, 
w ( 

< 

"ws-after-(" ( 

str ) > )
, 
< 
arguments ( 

Symbols ) >
, 
w ( 

< 
ws-after-arguments ( 

str ) > )
, 
l ( 


"=>" )
, 
w ( 

< 

"ws-after-=>" ( 

str ) > )
, 
< 
results ( 

Symbol ) >
, 
w ( 

< 
ws-after-results ( 

str ) > )
, 
l ( 


")" ) ] ) ]
, 

[ 

Symbol
, 
alt
, 
appl ( 

prod ( 

id ( 


"Regular-Sdf-Syntax" )
, 
w ( 


"" )
, 

[ 

sort ( 


"Symbol" )
, 
w ( 


"" )
, 
ql ( 


"|" )
, 
w ( 


"" )
, 
sort ( 


"Symbol" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"Symbol" )
, 
w ( 


"" )
, 
attrs ( 

l ( 


"{" )
, 
w ( 


"" )
, 

[ 

l ( 


"right" ) ]
, 
w ( 


"" )
, 
l ( 


"}" ) ) )
, 
w ( 


"" )
, 

[ 

< 
left ( 

Symbol ) >
, 
w ( 

< 
ws-after-left ( 

str ) > )
, 
l ( 


"|" )
, 
w ( 

< 

"ws-after-|" ( 

str ) > )
, 
< 
right ( 

Symbol ) > ] ) ]
, 

[ 

Symbol
, 
perm
, 
appl ( 

prod ( 

id ( 


"Regular-Sdf-Syntax" )
, 
w ( 


"" )
, 

[ 

ql ( 


"<<" )
, 
w ( 


"" )
, 
sort ( 


"Symbols" )
, 
w ( 


"" )
, 
ql ( 


">>" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"Symbol" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

l ( 


"<<" )
, 
w ( 

< 

"ws-after-<<" ( 

str ) > )
, 
< 
Symbols ( 

Symbols ) >
, 
w ( 

< 
ws-after-Symbols ( 

str ) > )
, 
l ( 


">>" ) ] ) ]
, 

[ 

Associativity
, 
left
, 
appl ( 

prod ( 

id ( 


"Priority-Sdf-Syntax" )
, 
w ( 


"" )
, 

[ 

ql ( 


"left" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"Associativity" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

l ( 


"left" ) ] ) ]
, 

[ 

Associativity
, 
right
, 
appl ( 

prod ( 

id ( 


"Priority-Sdf-Syntax" )
, 
w ( 


"" )
, 

[ 

ql ( 


"right" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"Associativity" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

l ( 


"right" ) ] ) ]
, 

[ 

Associativity
, 
non-assoc
, 
appl ( 

prod ( 

id ( 


"Priority-Sdf-Syntax" )
, 
w ( 


"" )
, 

[ 

ql ( 


"non-assoc" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"Associativity" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

l ( 


"non-assoc" ) ] ) ]
, 

[ 

Associativity
, 
assoc
, 
appl ( 

prod ( 

id ( 


"Priority-Sdf-Syntax" )
, 
w ( 


"" )
, 

[ 

ql ( 


"assoc" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"Associativity" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

l ( 


"assoc" ) ] ) ]
, 

[ 

Attribute
, 
bracket
, 
appl ( 

prod ( 

id ( 


"Priority-Sdf-Syntax" )
, 
w ( 


"" )
, 

[ 

ql ( 


"bracket" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"Attribute" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

l ( 


"bracket" ) ] ) ]
, 

[ 

Attribute
, 
atr
, 
appl ( 

prod ( 

id ( 


"Priority-Sdf-Syntax" )
, 
w ( 


"" )
, 

[ 

sort ( 


"Associativity" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"Attribute" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

< 
Associativity ( 

Associativity ) > ] ) ]
, 

[ 

Group
, 
simple-group
, 
appl ( 

prod ( 

id ( 


"Priority-Sdf-Syntax" )
, 
w ( 


"" )
, 

[ 

sort ( 


"Production" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"Group" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

< 
Production ( 

Production ) > ] ) ]
, 

[ 

Group
, 
prods-group
, 
appl ( 

prod ( 

id ( 


"Priority-Sdf-Syntax" )
, 
w ( 


"" )
, 

[ 

ql ( 


"{" )
, 
w ( 


"" )
, 
sort ( 


"Productions" )
, 
w ( 


"" )
, 
ql ( 


"}" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"Group" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

l ( 


"{" )
, 
w ( 

< 

"ws-after-{" ( 

str ) > )
, 
< 
Productions ( 

Productions ) >
, 
w ( 

< 
ws-after-Productions ( 

str ) > )
, 
l ( 


"}" ) ] ) ]
, 

[ 

Group
, 
assoc-group
, 
appl ( 

prod ( 

id ( 


"Priority-Sdf-Syntax" )
, 
w ( 


"" )
, 

[ 

ql ( 


"{" )
, 
w ( 


"" )
, 
sort ( 


"Associativity" )
, 
w ( 


"" )
, 
ql ( 


":" )
, 
w ( 


"" )
, 
sort ( 


"Productions" )
, 
w ( 


"" )
, 
ql ( 


"}" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"Group" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

l ( 


"{" )
, 
w ( 

< 

"ws-after-{" ( 

str ) > )
, 
< 
Associativity ( 

Associativity ) >
, 
w ( 

< 
ws-after-Associativity ( 

str ) > )
, 
l ( 


":" )
, 
w ( 

< 

"ws-after-:" ( 

str ) > )
, 
< 
Productions ( 

Productions ) >
, 
w ( 

< 
ws-after-Productions ( 

str ) > )
, 
l ( 


"}" ) ] ) ]
, 

[ 

Priority
, 
chain
, 
appl ( 

prod ( 

id ( 


"Priority-Sdf-Syntax" )
, 
w ( 


"" )
, 

[ 

iter-sep ( 

l ( 


"{" )
, 
w ( 


"" )
, 
sort ( 


"Group" )
, 
w ( 


"" )
, 
ql ( 


">" )
, 
w ( 


"" )
, 
l ( 


"}" )
, 
w ( 


"" )
, 
l ( 


"+" ) ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"Priority" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

list ( 

iter-sep ( 

l ( 


"{" )
, 
w ( 


"" )
, 
sort ( 


"Group" )
, 
w ( 


"" )
, 
ql ( 


">" )
, 
w ( 


"" )
, 
l ( 


"}" )
, 
w ( 


"" )
, 
l ( 


"*" ) )
, 
w ( 


"" )
, 
< 
list ( 

Group-list ) > ) ] ) ]
, 

[ 

Group-list
, 
single
, 

[ 

< 
head ( 

Group ) > ] ]
, 

[ 

Group-list
, 
many
, 

[ 

< 
head ( 

Group ) >
, 
w ( 

< 
ws-after-first ( 

str ) > )
, 
sep ( 

< 
sep ( 

str ) > )
, 
w ( 

< 
ws-after-sep ( 

str ) > )
, 
< 

[ 

tail ( 

Group-list ) ] > ] ]
, 

[ 

Priority
, 
assoc
, 
appl ( 

prod ( 

id ( 


"Priority-Sdf-Syntax" )
, 
w ( 


"" )
, 

[ 

sort ( 


"Group" )
, 
w ( 


"" )
, 
sort ( 


"Associativity" )
, 
w ( 


"" )
, 
sort ( 


"Group" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"Priority" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

< 
left ( 

Group ) >
, 
w ( 

< 
ws-after-left ( 

str ) > )
, 
< 
Associativity ( 

Associativity ) >
, 
w ( 

< 
ws-after-Associativity ( 

str ) > )
, 
< 
right ( 

Group ) > ] ) ]
, 

[ 

Priorities
, 
Default
, 
appl ( 

prod ( 

id ( 


"Priority-Sdf-Syntax" )
, 
w ( 


"" )
, 

[ 

iter-sep ( 

l ( 


"{" )
, 
w ( 


"" )
, 
sort ( 


"Priority" )
, 
w ( 


"" )
, 
ql ( 


"," )
, 
w ( 


"" )
, 
l ( 


"}" )
, 
w ( 


"" )
, 
l ( 


"*" ) ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"Priorities" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

list ( 

iter-sep ( 

l ( 


"{" )
, 
w ( 


"" )
, 
sort ( 


"Priority" )
, 
w ( 


"" )
, 
ql ( 


"," )
, 
w ( 


"" )
, 
l ( 


"}" )
, 
w ( 


"" )
, 
l ( 


"*" ) )
, 
w ( 


"" )
, 
< 
list ( 

Priority-list ) > ) ] ) ]
, 

[ 

Priority-list
, 
empty
, 

[ 
 ] ]
, 

[ 

Priority-list
, 
single
, 

[ 

< 
head ( 

Priority ) > ] ]
, 

[ 

Priority-list
, 
many
, 

[ 

< 
head ( 

Priority ) >
, 
w ( 

< 
ws-after-first ( 

str ) > )
, 
sep ( 

< 
sep ( 

str ) > )
, 
w ( 

< 
ws-after-sep ( 

str ) > )
, 
< 

[ 

tail ( 

Priority-list ) ] > ] ]
, 

[ 

Grammar
, 
priorities
, 
appl ( 

prod ( 

id ( 


"Priority-Sdf-Syntax" )
, 
w ( 


"" )
, 

[ 

ql ( 


"priorities" )
, 
w ( 


"" )
, 
sort ( 


"Priorities" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"Grammar" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

l ( 


"priorities" )
, 
w ( 

< 

"ws-after-priorities" ( 

str ) > )
, 
< 
Priorities ( 

Priorities ) > ] ) ]
, 

[ 

Symbol
, 
char-class
, 
appl ( 

prod ( 

id ( 


"CC-Sdf-Syntax" )
, 
w ( 


"" )
, 

[ 

sort ( 


"CharClass" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"Symbol" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

< 
CharClass ( 

CharClass ) > ] ) ]
, 

[ 

Sort
, 
one-char
, 
lex ( 

< 
lex ( 

str ) >
, 
sort ( 


"Sort" ) ) ]
, 

[ 

Sort
, 
more-chars
, 
lex ( 

< 
lex ( 

str ) >
, 
sort ( 


"Sort" ) ) ]
, 

[ 

Symbol
, 
sort
, 
appl ( 

prod ( 

id ( 


"Sorts-Sdf-Syntax" )
, 
w ( 


"" )
, 

[ 

sort ( 


"Sort" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"Symbol" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

< 
Sort ( 

Sort ) > ] ) ]
, 

[ 

Grammar
, 
sorts
, 
appl ( 

prod ( 

id ( 


"Sorts-Sdf-Syntax" )
, 
w ( 


"" )
, 

[ 

ql ( 


"sorts" )
, 
w ( 


"" )
, 
sort ( 


"Symbols" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"Grammar" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

l ( 


"sorts" )
, 
w ( 

< 

"ws-after-sorts" ( 

str ) > )
, 
< 
Symbols ( 

Symbols ) > ] ) ]
, 

[ 

UQLiteral
, 
one-char
, 
lex ( 

< 
lex ( 

str ) >
, 
sort ( 


"UQLiteral" ) ) ]
, 

[ 

UQLiteral
, 
more-chars
, 
lex ( 

< 
lex ( 

str ) >
, 
sort ( 


"UQLiteral" ) ) ]
, 

[ 

Literal
, 
uqlit
, 
appl ( 

prod ( 

id ( 


"Literals-Sdf-Syntax" )
, 
w ( 


"" )
, 

[ 

sort ( 


"UQLiteral" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"Literal" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

< 
UQLiteral ( 

UQLiteral ) > ] ) ]
, 

[ 

Symbol
, 
lit
, 
appl ( 

prod ( 

id ( 


"Literals-Sdf-Syntax" )
, 
w ( 


"" )
, 

[ 

sort ( 


"Literal" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"Symbol" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

< 
Literal ( 

Literal ) > ] ) ]
, 

[ 

Production
, 
prod-fun
, 
appl ( 

prod ( 

id ( 


"Literals-Sdf-Syntax" )
, 
w ( 


"" )
, 

[ 

sort ( 


"Literal" )
, 
w ( 


"" )
, 
ql ( 


"(" )
, 
w ( 


"" )
, 
iter-sep ( 

l ( 


"{" )
, 
w ( 


"" )
, 
sort ( 


"Symbol" )
, 
w ( 


"" )
, 
ql ( 


"," )
, 
w ( 


"" )
, 
l ( 


"}" )
, 
w ( 


"" )
, 
l ( 


"*" ) )
, 
w ( 


"" )
, 
ql ( 


")" )
, 
w ( 


"" )
, 
ql ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"Symbol" )
, 
w ( 


"" )
, 
sort ( 


"Attributes" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"Production" )
, 
w ( 


"" )
, 
attrs ( 

l ( 


"{" )
, 
w ( 


"" )
, 

[ 

l ( 


"avoid" ) ]
, 
w ( 


"" )
, 
l ( 


"}" ) ) )
, 
w ( 


"" )
, 

[ 

< 
function-symbol ( 

Literal ) >
, 
w ( 

< 
ws-after-function-symbol ( 

str ) > )
, 
l ( 


"(" )
, 
w ( 

< 

"ws-after-(" ( 

str ) > )
, 
list ( 

iter-sep ( 

l ( 


"{" )
, 
w ( 


"" )
, 
sort ( 


"Symbol" )
, 
w ( 


"" )
, 
ql ( 


"," )
, 
w ( 


"" )
, 
l ( 


"}" )
, 
w ( 


"" )
, 
l ( 


"*" ) )
, 
w ( 


"" )
, 
< 
arguments ( 

Symbol-arguments ) > )
, 
w ( 

< 
ws-after-arguments ( 

str ) > )
, 
l ( 


")" )
, 
w ( 

< 

"ws-after-)" ( 

str ) > )
, 
l ( 


"->" )
, 
w ( 

< 

"ws-after-->" ( 

str ) > )
, 
< 
result ( 

Symbol ) >
, 
w ( 

< 
ws-after-result ( 

str ) > )
, 
< 
Attributes ( 

Attributes ) > ] ) ]
, 

[ 

Symbol-arguments
, 
empty
, 

[ 
 ] ]
, 

[ 

Symbol-arguments
, 
single
, 

[ 

< 
head ( 

Symbol ) > ] ]
, 

[ 

Symbol-arguments
, 
many
, 

[ 

< 
head ( 

Symbol ) >
, 
w ( 

< 
ws-after-first ( 

str ) > )
, 
sep ( 

< 
sep ( 

str ) > )
, 
w ( 

< 
ws-after-sep ( 

str ) > )
, 
< 

[ 

tail ( 

Symbol-arguments ) ] > ] ]
, 

[ 

Symbol
, 
label
, 
appl ( 

prod ( 

id ( 


"Label-Sdf-Syntax" )
, 
w ( 


"" )
, 

[ 

sort ( 


"Literal" )
, 
w ( 


"" )
, 
ql ( 


":" )
, 
w ( 


"" )
, 
sort ( 


"Symbol" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"Symbol" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

< 
label ( 

Literal ) >
, 
w ( 

< 
ws-after-label ( 

str ) > )
, 
l ( 


":" )
, 
w ( 

< 

"ws-after-:" ( 

str ) > )
, 
< 
Symbol ( 

Symbol ) > ] ) ]
, 

[ 

Attribute
, 
cons
, 
appl ( 

prod ( 

id ( 


"Label-Sdf-Syntax" )
, 
w ( 


"" )
, 

[ 

ql ( 


"cons" )
, 
w ( 


"" )
, 
ql ( 


"(" )
, 
w ( 


"" )
, 
sort ( 


"ATerm" )
, 
w ( 


"" )
, 
ql ( 


")" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"Attribute" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

l ( 


"cons" )
, 
w ( 

< 

"ws-after-cons" ( 

str ) > )
, 
l ( 


"(" )
, 
w ( 

< 

"ws-after-(" ( 

str ) > )
, 
< 
term ( 

ATerm ) >
, 
w ( 

< 
ws-after-term ( 

str ) > )
, 
l ( 


")" ) ] ) ]
, 

[ 

Attribute
, 
constructor
, 
appl ( 

prod ( 

id ( 


"Label-Sdf-Syntax" )
, 
w ( 


"" )
, 

[ 

ql ( 


"constructor" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"Attribute" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

l ( 


"constructor" ) ] ) ]
, 

[ 

Attribute
, 
memo
, 
appl ( 

prod ( 

id ( 


"Label-Sdf-Syntax" )
, 
w ( 


"" )
, 

[ 

ql ( 


"memo" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"Attribute" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

l ( 


"memo" ) ] ) ]
, 

[ 

Attribute
, 
traverse
, 
appl ( 

prod ( 

id ( 


"Label-Sdf-Syntax" )
, 
w ( 


"" )
, 

[ 

ql ( 


"traverse" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"Attribute" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

l ( 


"traverse" ) ] ) ]
, 

[ 

Lookahead
, 
char-class
, 
appl ( 

prod ( 

id ( 


"Restrictions-Sdf-Syntax" )
, 
w ( 


"" )
, 

[ 

sort ( 


"CharClass" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"Lookahead" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

< 
CharClass ( 

CharClass ) > ] ) ]
, 

[ 

Lookahead
, 
seq
, 
appl ( 

prod ( 

id ( 


"Restrictions-Sdf-Syntax" )
, 
w ( 


"" )
, 

[ 

sort ( 


"CharClass" )
, 
w ( 


"" )
, 
ql ( 


"." )
, 
w ( 


"" )
, 
sort ( 


"Lookaheads" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"Lookahead" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

< 
head ( 

CharClass ) >
, 
w ( 

< 
ws-after-head ( 

str ) > )
, 
l ( 


"." )
, 
w ( 

< 

"ws-after-." ( 

str ) > )
, 
< 
tail ( 

Lookaheads ) > ] ) ]
, 

[ 

Lookaheads
, 
single
, 
appl ( 

prod ( 

id ( 


"Restrictions-Sdf-Syntax" )
, 
w ( 


"" )
, 

[ 

sort ( 


"Lookahead" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"Lookaheads" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

< 
Lookahead ( 

Lookahead ) > ] ) ]
, 

[ 

Lookaheads
, 
alt
, 
appl ( 

prod ( 

id ( 


"Restrictions-Sdf-Syntax" )
, 
w ( 


"" )
, 

[ 

sort ( 


"Lookaheads" )
, 
w ( 


"" )
, 
ql ( 


"|" )
, 
w ( 


"" )
, 
sort ( 


"Lookaheads" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"Lookaheads" )
, 
w ( 


"" )
, 
attrs ( 

l ( 


"{" )
, 
w ( 


"" )
, 

[ 

l ( 


"right" ) ]
, 
w ( 


"" )
, 
l ( 


"}" ) ) )
, 
w ( 


"" )
, 

[ 

< 
left ( 

Lookaheads ) >
, 
w ( 

< 
ws-after-left ( 

str ) > )
, 
l ( 


"|" )
, 
w ( 

< 

"ws-after-|" ( 

str ) > )
, 
< 
right ( 

Lookaheads ) > ] ) ]
, 

[ 

Lookaheads
, 
Bracket
, 
appl ( 

prod ( 

id ( 


"Restrictions-Sdf-Syntax" )
, 
w ( 


"" )
, 

[ 

ql ( 


"(" )
, 
w ( 


"" )
, 
sort ( 


"Lookaheads" )
, 
w ( 


"" )
, 
ql ( 


")" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"Lookaheads" )
, 
w ( 


"" )
, 
attrs ( 

l ( 


"{" )
, 
w ( 


"" )
, 

[ 

l ( 


"bracket" ) ]
, 
w ( 


"" )
, 
l ( 


"}" ) ) )
, 
w ( 


"" )
, 

[ 

l ( 


"(" )
, 
w ( 

< 

"ws-after-(" ( 

str ) > )
, 
< 
Lookaheads ( 

Lookaheads ) >
, 
w ( 

< 
ws-after-Lookaheads ( 

str ) > )
, 
l ( 


")" ) ] ) ]
, 

[ 

Lookaheads
, 
list
, 
appl ( 

prod ( 

id ( 


"Restrictions-Sdf-Syntax" )
, 
w ( 


"" )
, 

[ 

ql ( 


"[[" )
, 
w ( 


"" )
, 
iter-sep ( 

l ( 


"{" )
, 
w ( 


"" )
, 
sort ( 


"Lookahead" )
, 
w ( 


"" )
, 
ql ( 


"," )
, 
w ( 


"" )
, 
l ( 


"}" )
, 
w ( 


"" )
, 
l ( 


"*" ) )
, 
w ( 


"" )
, 
ql ( 


"]]" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"Lookaheads" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

l ( 


"[[" )
, 
w ( 

< 

"ws-after-[[" ( 

str ) > )
, 
list ( 

iter-sep ( 

l ( 


"{" )
, 
w ( 


"" )
, 
sort ( 


"Lookahead" )
, 
w ( 


"" )
, 
ql ( 


"," )
, 
w ( 


"" )
, 
l ( 


"}" )
, 
w ( 


"" )
, 
l ( 


"*" ) )
, 
w ( 


"" )
, 
< 
list ( 

Lookahead-list ) > )
, 
w ( 

< 
ws-after-list ( 

str ) > )
, 
l ( 


"]]" ) ] ) ]
, 

[ 

Lookahead-list
, 
empty
, 

[ 
 ] ]
, 

[ 

Lookahead-list
, 
single
, 

[ 

< 
head ( 

Lookahead ) > ] ]
, 

[ 

Lookahead-list
, 
many
, 

[ 

< 
head ( 

Lookahead ) >
, 
w ( 

< 
ws-after-first ( 

str ) > )
, 
sep ( 

< 
sep ( 

str ) > )
, 
w ( 

< 
ws-after-sep ( 

str ) > )
, 
< 

[ 

tail ( 

Lookahead-list ) ] > ] ]
, 

[ 

Restriction
, 
follow
, 
appl ( 

prod ( 

id ( 


"Restrictions-Sdf-Syntax" )
, 
w ( 


"" )
, 

[ 

sort ( 


"Symbols" )
, 
w ( 


"" )
, 
ql ( 


"-/-" )
, 
w ( 


"" )
, 
sort ( 


"Lookaheads" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"Restriction" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

< 
Symbols ( 

Symbols ) >
, 
w ( 

< 
ws-after-Symbols ( 

str ) > )
, 
l ( 


"-/-" )
, 
w ( 

< 

"ws-after--/-" ( 

str ) > )
, 
< 
Lookaheads ( 

Lookaheads ) > ] ) ]
, 

[ 

Restrictions
, 
Default
, 
appl ( 

prod ( 

id ( 


"Restrictions-Sdf-Syntax" )
, 
w ( 


"" )
, 

[ 

iter ( 

sort ( 


"Restriction" )
, 
w ( 


"" )
, 
l ( 


"*" ) ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"Restrictions" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

list ( 

iter ( 

sort ( 


"Restriction" )
, 
w ( 


"" )
, 
l ( 


"*" ) )
, 
w ( 


"" )
, 
< 
list ( 

Restriction-list ) > ) ] ) ]
, 

[ 

Restriction-list
, 
empty
, 

[ 
 ] ]
, 

[ 

Restriction-list
, 
single
, 

[ 

< 
head ( 

Restriction ) > ] ]
, 

[ 

Restriction-list
, 
many
, 

[ 

< 
head ( 

Restriction ) >
, 
w ( 

< 
ws-after-first ( 

str ) > )
, 
< 

[ 

tail ( 

Restriction-list ) ] > ] ]
, 

[ 

Grammar
, 
restrictions
, 
appl ( 

prod ( 

id ( 


"Restrictions-Sdf-Syntax" )
, 
w ( 


"" )
, 

[ 

ql ( 


"restrictions" )
, 
w ( 


"" )
, 
sort ( 


"Restrictions" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"Grammar" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

l ( 


"restrictions" )
, 
w ( 

< 

"ws-after-restrictions" ( 

str ) > )
, 
< 
Restrictions ( 

Restrictions ) > ] ) ]
, 

[ 

Attribute
, 
reject
, 
appl ( 

prod ( 

id ( 


"Restrictions-Sdf-Syntax" )
, 
w ( 


"" )
, 

[ 

ql ( 


"reject" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"Attribute" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

l ( 


"reject" ) ] ) ]
, 

[ 

Attribute
, 
prefer
, 
appl ( 

prod ( 

id ( 


"Restrictions-Sdf-Syntax" )
, 
w ( 


"" )
, 

[ 

ql ( 


"prefer" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"Attribute" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

l ( 


"prefer" ) ] ) ]
, 

[ 

Attribute
, 
avoid
, 
appl ( 

prod ( 

id ( 


"Restrictions-Sdf-Syntax" )
, 
w ( 


"" )
, 

[ 

ql ( 


"avoid" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"Attribute" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

l ( 


"avoid" ) ] ) ]
, 

[ 

Grammar
, 
aliases
, 
appl ( 

prod ( 

id ( 


"Alias-Sdf-Syntax" )
, 
w ( 


"" )
, 

[ 

ql ( 


"aliases" )
, 
w ( 


"" )
, 
sort ( 


"Aliases" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"Grammar" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

l ( 


"aliases" )
, 
w ( 

< 

"ws-after-aliases" ( 

str ) > )
, 
< 
Aliases ( 

Aliases ) > ] ) ]
, 

[ 

Alias
, 
alias
, 
appl ( 

prod ( 

id ( 


"Alias-Sdf-Syntax" )
, 
w ( 


"" )
, 

[ 

sort ( 


"Symbol" )
, 
w ( 


"" )
, 
ql ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"Symbol" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"Alias" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

< 
Symbol ( 

Symbol ) >
, 
w ( 

< 
ws-after-Symbol ( 

str ) > )
, 
l ( 


"->" )
, 
w ( 

< 
ws-after-arrow ( 

str ) > )
, 
< 
alias ( 

Symbol ) > ] ) ]
, 

[ 

Aliases
, 
Default
, 
appl ( 

prod ( 

id ( 


"Alias-Sdf-Syntax" )
, 
w ( 


"" )
, 

[ 

iter ( 

sort ( 


"Alias" )
, 
w ( 


"" )
, 
l ( 


"*" ) ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"Aliases" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

list ( 

iter ( 

sort ( 


"Alias" )
, 
w ( 


"" )
, 
l ( 


"*" ) )
, 
w ( 


"" )
, 
< 
list ( 

Alias-list ) > ) ] ) ]
, 

[ 

Alias-list
, 
empty
, 

[ 
 ] ]
, 

[ 

Alias-list
, 
single
, 

[ 

< 
head ( 

Alias ) > ] ]
, 

[ 

Alias-list
, 
many
, 

[ 

< 
head ( 

Alias ) >
, 
w ( 

< 
ws-after-first ( 

str ) > )
, 
< 

[ 

tail ( 

Alias-list ) ] > ] ]
, 

[ 

Symbol
, 
Bracket
, 
appl ( 

prod ( 

id ( 


"Symbols" )
, 
w ( 


"" )
, 

[ 

ql ( 


"(" )
, 
w ( 


"" )
, 
sort ( 


"Symbol" )
, 
w ( 


"" )
, 
ql ( 


")" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"Symbol" )
, 
w ( 


"" )
, 
attrs ( 

l ( 


"{" )
, 
w ( 


"" )
, 

[ 

l ( 


"bracket" ) ]
, 
w ( 


"" )
, 
l ( 


"}" ) ) )
, 
w ( 


"" )
, 

[ 

l ( 


"(" )
, 
w ( 

< 

"ws-after-(" ( 

str ) > )
, 
< 
Symbol ( 

Symbol ) >
, 
w ( 

< 
ws-after-Symbol ( 

str ) > )
, 
l ( 


")" ) ] ) ]
, 

[ 

Symbols
, 
Default
, 
appl ( 

prod ( 

id ( 


"Symbols" )
, 
w ( 


"" )
, 

[ 

iter ( 

sort ( 


"Symbol" )
, 
w ( 


"" )
, 
l ( 


"*" ) ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"Symbols" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

list ( 

iter ( 

sort ( 


"Symbol" )
, 
w ( 


"" )
, 
l ( 


"*" ) )
, 
w ( 


"" )
, 
< 
list ( 

Symbol-list ) > ) ] ) ]
, 

[ 

Symbol-list
, 
empty
, 

[ 
 ] ]
, 

[ 

Symbol-list
, 
single
, 

[ 

< 
head ( 

Symbol ) > ] ]
, 

[ 

Symbol-list
, 
many
, 

[ 

< 
head ( 

Symbol ) >
, 
w ( 

< 
ws-after-first ( 

str ) > )
, 
< 

[ 

tail ( 

Symbol-list ) ] > ] ]
, 

[ 

Grammar
, 
empty-grammar
, 
appl ( 

prod ( 

id ( 


"Grammar-Syntax" )
, 
w ( 


"" )
, 

[ 

ql ( 


"(/)" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"Grammar" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

l ( 


"(/)" ) ] ) ]
, 

[ 

Grammar
, 
conc-grammars
, 
appl ( 

prod ( 

id ( 


"Grammar-Syntax" )
, 
w ( 


"" )
, 

[ 

sort ( 


"Grammar" )
, 
w ( 


"" )
, 
sort ( 


"Grammar" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"Grammar" )
, 
w ( 


"" )
, 
attrs ( 

l ( 


"{" )
, 
w ( 


"" )
, 

[ 

l ( 


"assoc" ) ]
, 
w ( 


"" )
, 
l ( 


"}" ) ) )
, 
w ( 


"" )
, 

[ 

< 
left ( 

Grammar ) >
, 
w ( 

< 
ws-after-left ( 

str ) > )
, 
< 
right ( 

Grammar ) > ] ) ]
, 

[ 

Grammar
, 
Bracket
, 
appl ( 

prod ( 

id ( 


"Grammar-Syntax" )
, 
w ( 


"" )
, 

[ 

ql ( 


"(" )
, 
w ( 


"" )
, 
sort ( 


"Grammar" )
, 
w ( 


"" )
, 
ql ( 


")" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"Grammar" )
, 
w ( 


"" )
, 
attrs ( 

l ( 


"{" )
, 
w ( 


"" )
, 

[ 

l ( 


"bracket" ) ]
, 
w ( 


"" )
, 
l ( 


"}" ) ) )
, 
w ( 


"" )
, 

[ 

l ( 


"(" )
, 
w ( 

< 

"ws-after-(" ( 

str ) > )
, 
< 
Grammar ( 

Grammar ) >
, 
w ( 

< 
ws-after-Grammar ( 

str ) > )
, 
l ( 


")" ) ] ) ]
, 

[ 

Renamings
, 
renamings
, 
appl ( 

prod ( 

id ( 


"Renaming-Sdf-Syntax" )
, 
w ( 


"" )
, 

[ 

ql ( 


"[" )
, 
w ( 


"" )
, 
iter ( 

sort ( 


"Renaming" )
, 
w ( 


"" )
, 
l ( 


"*" ) )
, 
w ( 


"" )
, 
ql ( 


"]" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"Renamings" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

l ( 


"[" )
, 
w ( 

< 

"ws-after-[" ( 

str ) > )
, 
list ( 

iter ( 

sort ( 


"Renaming" )
, 
w ( 


"" )
, 
l ( 


"*" ) )
, 
w ( 


"" )
, 
< 
list ( 

Renaming-list ) > )
, 
w ( 

< 
ws-after-list ( 

str ) > )
, 
l ( 


"]" ) ] ) ]
, 

[ 

Renaming-list
, 
empty
, 

[ 
 ] ]
, 

[ 

Renaming-list
, 
single
, 

[ 

< 
head ( 

Renaming ) > ] ]
, 

[ 

Renaming-list
, 
many
, 

[ 

< 
head ( 

Renaming ) >
, 
w ( 

< 
ws-after-first ( 

str ) > )
, 
< 

[ 

tail ( 

Renaming-list ) ] > ] ]
, 

[ 

Renaming
, 
symbol
, 
appl ( 

prod ( 

id ( 


"Renaming-Sdf-Syntax" )
, 
w ( 


"" )
, 

[ 

sort ( 


"Symbol" )
, 
w ( 


"" )
, 
ql ( 


"=>" )
, 
w ( 


"" )
, 
sort ( 


"Symbol" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"Renaming" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

< 
from ( 

Symbol ) >
, 
w ( 

< 
ws-after-from ( 

str ) > )
, 
l ( 


"=>" )
, 
w ( 

< 

"ws-after-=>" ( 

str ) > )
, 
< 
to ( 

Symbol ) > ] ) ]
, 

[ 

Renaming
, 
production
, 
appl ( 

prod ( 

id ( 


"Renaming-Sdf-Syntax" )
, 
w ( 


"" )
, 

[ 

sort ( 


"Production" )
, 
w ( 


"" )
, 
ql ( 


"=>" )
, 
w ( 


"" )
, 
sort ( 


"Production" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"Renaming" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

< 
from ( 

Production ) >
, 
w ( 

< 
ws-after-from ( 

str ) > )
, 
l ( 


"=>" )
, 
w ( 

< 

"ws-after-=>" ( 

str ) > )
, 
< 
to ( 

Production ) > ] ) ]
, 

[ 

NatCon
, 
digits
, 
lex ( 

< 
lex ( 

str ) >
, 
sort ( 


"NatCon" ) ) ]
, 

[ 

IntCon
, 
natural
, 
appl ( 

prod ( 

id ( 


"IntCon" )
, 
w ( 


"" )
, 

[ 

sort ( 


"NatCon" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"IntCon" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

< 
NatCon ( 

NatCon ) > ] ) ]
, 

[ 

IntCon
, 
positive
, 
appl ( 

prod ( 

id ( 


"IntCon" )
, 
w ( 


"" )
, 

[ 

ql ( 


"+" )
, 
w ( 


"" )
, 
sort ( 


"NatCon" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"IntCon" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

l ( 


"+" )
, 
w ( 

< 
ws-after-pos ( 

str ) > )
, 
< 
NatCon ( 

NatCon ) > ] ) ]
, 

[ 

IntCon
, 
negative
, 
appl ( 

prod ( 

id ( 


"IntCon" )
, 
w ( 


"" )
, 

[ 

ql ( 


"-" )
, 
w ( 


"" )
, 
sort ( 


"NatCon" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"IntCon" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

l ( 


"-" )
, 
w ( 

< 
ws-after-neg ( 

str ) > )
, 
< 
NatCon ( 

NatCon ) > ] ) ]
, 

[ 

CharRange
, 
Default
, 
appl ( 

prod ( 

id ( 


"Character-Class-Syntax" )
, 
w ( 


"" )
, 

[ 

sort ( 


"Character" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"CharRange" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

< 
Character ( 

Character ) > ] ) ]
, 

[ 

CharRange
, 
range
, 
appl ( 

prod ( 

id ( 


"Character-Class-Syntax" )
, 
w ( 


"" )
, 

[ 

sort ( 


"Character" )
, 
w ( 


"" )
, 
ql ( 


"-" )
, 
w ( 


"" )
, 
sort ( 


"Character" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"CharRange" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

< 
start ( 

Character ) >
, 
w ( 

< 
ws-after-start ( 

str ) > )
, 
l ( 


"-" )
, 
w ( 

< 

"ws-after--" ( 

str ) > )
, 
< 
end ( 

Character ) > ] ) ]
, 

[ 

CharRanges
, 
Default
, 
appl ( 

prod ( 

id ( 


"Character-Class-Syntax" )
, 
w ( 


"" )
, 

[ 

sort ( 


"CharRange" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"CharRanges" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

< 
CharRange ( 

CharRange ) > ] ) ]
, 

[ 

CharRanges
, 
conc
, 
appl ( 

prod ( 

id ( 


"Character-Class-Syntax" )
, 
w ( 


"" )
, 

[ 

sort ( 


"CharRanges" )
, 
w ( 


"" )
, 
sort ( 


"CharRanges" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"CharRanges" )
, 
w ( 


"" )
, 
attrs ( 

l ( 


"{" )
, 
w ( 


"" )
, 

[ 

l ( 


"right" )
, 
w ( 


"" )
, 
sep ( 


"," )
, 
w ( 


"" )
, 
l ( 


"memo" ) ]
, 
w ( 


"" )
, 
l ( 


"}" ) ) )
, 
w ( 


"" )
, 

[ 

< 
left ( 

CharRanges ) >
, 
w ( 

< 
ws-after-left ( 

str ) > )
, 
< 
right ( 

CharRanges ) > ] ) ]
, 

[ 

CharRanges
, 
Bracket
, 
appl ( 

prod ( 

id ( 


"Character-Class-Syntax" )
, 
w ( 


"" )
, 

[ 

ql ( 


"(" )
, 
w ( 


"" )
, 
sort ( 


"CharRanges" )
, 
w ( 


"" )
, 
ql ( 


")" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"CharRanges" )
, 
w ( 


"" )
, 
attrs ( 

l ( 


"{" )
, 
w ( 


"" )
, 

[ 

l ( 


"bracket" ) ]
, 
w ( 


"" )
, 
l ( 


"}" ) ) )
, 
w ( 


"" )
, 

[ 

l ( 


"(" )
, 
w ( 

< 

"ws-after-(" ( 

str ) > )
, 
< 
CharRanges ( 

CharRanges ) >
, 
w ( 

< 
ws-after-CharRanges ( 

str ) > )
, 
l ( 


")" ) ] ) ]
, 

[ 

OptCharRanges
, 
absent
, 
appl ( 

prod ( 

id ( 


"Character-Class-Syntax" )
, 
w ( 


"" )
, 

[ 
 ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"OptCharRanges" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 
 ] ) ]
, 

[ 

OptCharRanges
, 
present
, 
appl ( 

prod ( 

id ( 


"Character-Class-Syntax" )
, 
w ( 


"" )
, 

[ 

sort ( 


"CharRanges" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"OptCharRanges" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

< 
CharRanges ( 

CharRanges ) > ] ) ]
, 

[ 

CharClass
, 
simple-charclass
, 
appl ( 

prod ( 

id ( 


"Character-Class-Syntax" )
, 
w ( 


"" )
, 

[ 

ql ( 


"[" )
, 
w ( 


"" )
, 
sort ( 


"OptCharRanges" )
, 
w ( 


"" )
, 
ql ( 


"]" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"CharClass" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

l ( 


"[" )
, 
w ( 

< 

"ws-after-[" ( 

str ) > )
, 
< 
OptCharRanges ( 

OptCharRanges ) >
, 
w ( 

< 
ws-after-OptCharRanges ( 

str ) > )
, 
l ( 


"]" ) ] ) ]
, 

[ 

CharClass
, 
comp
, 
appl ( 

prod ( 

id ( 


"Character-Class-Syntax" )
, 
w ( 


"" )
, 

[ 

ql ( 


"~" )
, 
w ( 


"" )
, 
sort ( 


"CharClass" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"CharClass" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

l ( 


"~" )
, 
w ( 

< 

"ws-after-~" ( 

str ) > )
, 
< 
CharClass ( 

CharClass ) > ] ) ]
, 

[ 

CharClass
, 
diff
, 
appl ( 

prod ( 

id ( 


"Character-Class-Syntax" )
, 
w ( 


"" )
, 

[ 

sort ( 


"CharClass" )
, 
w ( 


"" )
, 
ql ( 


"/" )
, 
w ( 


"" )
, 
sort ( 


"CharClass" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"CharClass" )
, 
w ( 


"" )
, 
attrs ( 

l ( 


"{" )
, 
w ( 


"" )
, 

[ 

l ( 


"left" )
, 
w ( 


"" )
, 
sep ( 


"," )
, 
w ( 


"" )
, 
l ( 


"memo" ) ]
, 
w ( 


"" )
, 
l ( 


"}" ) ) )
, 
w ( 


"" )
, 

[ 

< 
left ( 

CharClass ) >
, 
w ( 

< 
ws-after-left ( 

str ) > )
, 
l ( 


"/" )
, 
w ( 

< 

"ws-after-/" ( 

str ) > )
, 
< 
right ( 

CharClass ) > ] ) ]
, 

[ 

CharClass
, 
isect
, 
appl ( 

prod ( 

id ( 


"Character-Class-Syntax" )
, 
w ( 


"" )
, 

[ 

sort ( 


"CharClass" )
, 
w ( 


"" )
, 
ql ( 


"/\\" )
, 
w ( 


"" )
, 
sort ( 


"CharClass" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"CharClass" )
, 
w ( 


"" )
, 
attrs ( 

l ( 


"{" )
, 
w ( 


"" )
, 

[ 

l ( 


"left" )
, 
w ( 


"" )
, 
sep ( 


"," )
, 
w ( 


"" )
, 
l ( 


"memo" ) ]
, 
w ( 


"" )
, 
l ( 


"}" ) ) )
, 
w ( 


"" )
, 

[ 

< 
left ( 

CharClass ) >
, 
w ( 

< 
ws-after-left ( 

str ) > )
, 
l ( 


"/\\" )
, 
w ( 

< 

"ws-after-/\\" ( 

str ) > )
, 
< 
right ( 

CharClass ) > ] ) ]
, 

[ 

CharClass
, 
union
, 
appl ( 

prod ( 

id ( 


"Character-Class-Syntax" )
, 
w ( 


"" )
, 

[ 

sort ( 


"CharClass" )
, 
w ( 


"" )
, 
ql ( 


"\\/" )
, 
w ( 


"" )
, 
sort ( 


"CharClass" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"CharClass" )
, 
w ( 


"" )
, 
attrs ( 

l ( 


"{" )
, 
w ( 


"" )
, 

[ 

l ( 


"left" ) ]
, 
w ( 


"" )
, 
l ( 


"}" ) ) )
, 
w ( 


"" )
, 

[ 

< 
left ( 

CharClass ) >
, 
w ( 

< 
ws-after-left ( 

str ) > )
, 
l ( 


"\\/" )
, 
w ( 

< 

"ws-after-\\/" ( 

str ) > )
, 
< 
right ( 

CharClass ) > ] ) ]
, 

[ 

CharClass
, 
Bracket
, 
appl ( 

prod ( 

id ( 


"Character-Class-Syntax" )
, 
w ( 


"" )
, 

[ 

ql ( 


"(" )
, 
w ( 


"" )
, 
sort ( 


"CharClass" )
, 
w ( 


"" )
, 
ql ( 


")" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"CharClass" )
, 
w ( 


"" )
, 
attrs ( 

l ( 


"{" )
, 
w ( 


"" )
, 

[ 

l ( 


"bracket" ) ]
, 
w ( 


"" )
, 
l ( 


"}" ) ) )
, 
w ( 


"" )
, 

[ 

l ( 


"(" )
, 
w ( 

< 

"ws-after-(" ( 

str ) > )
, 
< 
CharClass ( 

CharClass ) >
, 
w ( 

< 
ws-after-CharClass ( 

str ) > )
, 
l ( 


")" ) ] ) ]
, 

[ 

AlphaNumericalEscChar
, 
default
, 
lex ( 

< 
lex ( 

str ) >
, 
sort ( 


"AlphaNumericalEscChar" ) ) ]
, 

[ 

DecimalEscChar
, 
dec0_199
, 
lex ( 

< 
lex ( 

str ) >
, 
sort ( 


"DecimalEscChar" ) ) ]
, 

[ 

DecimalEscChar
, 
dec200_249
, 
lex ( 

< 
lex ( 

str ) >
, 
sort ( 


"DecimalEscChar" ) ) ]
, 

[ 

DecimalEscChar
, 
dec250_255
, 
lex ( 

< 
lex ( 

str ) >
, 
sort ( 


"DecimalEscChar" ) ) ]
, 

[ 

EscChar
, 
alpha-numeric
, 
lex ( 

< 
lex ( 

str ) >
, 
sort ( 


"EscChar" ) ) ]
, 

[ 

EscChar
, 
decimal
, 
lex ( 

< 
lex ( 

str ) >
, 
sort ( 


"EscChar" ) ) ]
, 

[ 

L-Char
, 
normal
, 
lex ( 

< 
lex ( 

str ) >
, 
sort ( 


"L-Char" ) ) ]
, 

[ 

L-Char
, 
escaped
, 
lex ( 

< 
lex ( 

str ) >
, 
sort ( 


"L-Char" ) ) ]
, 

[ 

Literal
, 
quoted
, 
lex ( 

< 
lex ( 

str ) >
, 
sort ( 


"Literal" ) ) ]
, 

[ 

ATerms
, 
aterm
, 
appl ( 

prod ( 

id ( 


"ATerms" )
, 
w ( 


"" )
, 

[ 

sort ( 


"ATerm" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"ATerms" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

< 
term ( 

ATerm ) > ] ) ]
, 

[ 

ATerms
, 
cons
, 
appl ( 

prod ( 

id ( 


"ATerms" )
, 
w ( 


"" )
, 

[ 

sort ( 


"ATerm" )
, 
w ( 


"" )
, 
ql ( 


"," )
, 
w ( 


"" )
, 
sort ( 


"ATerms" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"ATerms" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

< 
head ( 

ATerm ) >
, 
w ( 

< 
ws-after-head ( 

str ) > )
, 
l ( 


"," )
, 
w ( 

< 

"ws-after-," ( 

str ) > )
, 
< 
tail ( 

ATerms ) > ] ) ]
, 

[ 

ATermList
, 
empty
, 
appl ( 

prod ( 

id ( 


"ATerms" )
, 
w ( 


"" )
, 

[ 

ql ( 


"[" )
, 
w ( 


"" )
, 
ql ( 


"]" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"ATermList" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

l ( 


"[" )
, 
w ( 

< 

"ws-after-[" ( 

str ) > )
, 
l ( 


"]" ) ] ) ]
, 

[ 

ATermList
, 
not-empty
, 
appl ( 

prod ( 

id ( 


"ATerms" )
, 
w ( 


"" )
, 

[ 

ql ( 


"[" )
, 
w ( 


"" )
, 
sort ( 


"ATerms" )
, 
w ( 


"" )
, 
ql ( 


"]" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"ATermList" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

l ( 


"[" )
, 
w ( 

< 

"ws-after-[" ( 

str ) > )
, 
< 
ATerms ( 

ATerms ) >
, 
w ( 

< 
ws-after-ATerms ( 

str ) > )
, 
l ( 


"]" ) ] ) ]
, 

[ 

ACon
, 
int
, 
appl ( 

prod ( 

id ( 


"ATerms" )
, 
w ( 


"" )
, 

[ 

sort ( 


"IntCon" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"ACon" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

< 
IntCon ( 

IntCon ) > ] ) ]
, 

[ 

ACon
, 
real
, 
appl ( 

prod ( 

id ( 


"ATerms" )
, 
w ( 


"" )
, 

[ 

sort ( 


"RealCon" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"ACon" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

< 
RealCon ( 

RealCon ) > ] ) ]
, 

[ 

AFun
, 
Default
, 
appl ( 

prod ( 

id ( 


"ATerms" )
, 
w ( 


"" )
, 

[ 

sort ( 


"Literal" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"AFun" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

< 
Literal ( 

Literal ) > ] ) ]
, 

[ 

ATerm
, 
constant
, 
appl ( 

prod ( 

id ( 


"ATerms" )
, 
w ( 


"" )
, 

[ 

sort ( 


"ACon" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"ATerm" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

< 
ACon ( 

ACon ) > ] ) ]
, 

[ 

ATerm
, 
list
, 
appl ( 

prod ( 

id ( 


"ATerms" )
, 
w ( 


"" )
, 

[ 

sort ( 


"ATermList" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"ATerm" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

< 
list ( 

ATermList ) > ] ) ]
, 

[ 

ATerm
, 
fun
, 
appl ( 

prod ( 

id ( 


"ATerms" )
, 
w ( 


"" )
, 

[ 

sort ( 


"AFun" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"ATerm" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

< 
fun ( 

AFun ) > ] ) ]
, 

[ 

ATerm
, 
appl
, 
appl ( 

prod ( 

id ( 


"ATerms" )
, 
w ( 


"" )
, 

[ 

sort ( 


"AFun" )
, 
w ( 


"" )
, 
ql ( 


"(" )
, 
w ( 


"" )
, 
sort ( 


"ATerms" )
, 
w ( 


"" )
, 
ql ( 


")" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"ATerm" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

< 
fun ( 

AFun ) >
, 
w ( 

< 
ws-after-fun ( 

str ) > )
, 
l ( 


"(" )
, 
w ( 

< 

"ws-after-(" ( 

str ) > )
, 
< 
args ( 

ATerms ) >
, 
w ( 

< 
ws-after-args ( 

str ) > )
, 
l ( 


")" ) ] ) ]
, 

[ 

Ann
, 
annotation
, 
appl ( 

prod ( 

id ( 


"ATerms" )
, 
w ( 


"" )
, 

[ 

ql ( 


"{" )
, 
w ( 


"" )
, 
sort ( 


"ATerms" )
, 
w ( 


"" )
, 
ql ( 


"}" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"Ann" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

l ( 


"{" )
, 
w ( 

< 

"ws-after-{" ( 

str ) > )
, 
< 
ATerms ( 

ATerms ) >
, 
w ( 

< 
ws-after-ATerms ( 

str ) > )
, 
l ( 


"}" ) ] ) ]
, 

[ 

ATerm
, 
annotated-constant
, 
appl ( 

prod ( 

id ( 


"ATerms" )
, 
w ( 


"" )
, 

[ 

sort ( 


"ACon" )
, 
w ( 


"" )
, 
sort ( 


"Ann" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"ATerm" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

< 
ACon ( 

ACon ) >
, 
w ( 

< 
ws-after-ACon ( 

str ) > )
, 
< 
Ann ( 

Ann ) > ] ) ]
, 

[ 

ATerm
, 
annotated-list
, 
appl ( 

prod ( 

id ( 


"ATerms" )
, 
w ( 


"" )
, 

[ 

sort ( 


"ATermList" )
, 
w ( 


"" )
, 
sort ( 


"Ann" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"ATerm" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

< 
list ( 

ATermList ) >
, 
w ( 

< 
ws-after-list ( 

str ) > )
, 
< 
Ann ( 

Ann ) > ] ) ]
, 

[ 

ATerm
, 
annotated-fun
, 
appl ( 

prod ( 

id ( 


"ATerms" )
, 
w ( 


"" )
, 

[ 

sort ( 


"AFun" )
, 
w ( 


"" )
, 
sort ( 


"Ann" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"ATerm" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

< 
fun ( 

AFun ) >
, 
w ( 

< 
ws-after-fun ( 

str ) > )
, 
< 
Ann ( 

Ann ) > ] ) ]
, 

[ 

ATerm
, 
annotated-appl
, 
appl ( 

prod ( 

id ( 


"ATerms" )
, 
w ( 


"" )
, 

[ 

sort ( 


"AFun" )
, 
w ( 


"" )
, 
ql ( 


"(" )
, 
w ( 


"" )
, 
sort ( 


"ATerms" )
, 
w ( 


"" )
, 
ql ( 


")" )
, 
w ( 


"" )
, 
sort ( 


"Ann" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"ATerm" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

< 
fun ( 

AFun ) >
, 
w ( 

< 
ws-after-fun ( 

str ) > )
, 
l ( 


"(" )
, 
w ( 

< 

"ws-after-(" ( 

str ) > )
, 
< 
args ( 

ATerms ) >
, 
w ( 

< 
ws-after-args ( 

str ) > )
, 
l ( 


")" )
, 
w ( 

< 

"ws-after-)" ( 

str ) > )
, 
< 
Ann ( 

Ann ) > ] ) ]
, 

[ 

TagId
, 
default
, 
lex ( 

< 
lex ( 

str ) >
, 
sort ( 


"TagId" ) ) ]
, 

[ 

TagId
, 
empty
, 
appl ( 

prod ( 

id ( 


"Layout" )
, 
w ( 


"" )
, 

[ 
 ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"TagId" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 
 ] ) ]
, 

[ 

NumChar
, 
digits
, 
lex ( 

< 
lex ( 

str ) >
, 
sort ( 


"NumChar" ) ) ]
, 

[ 

ShortChar
, 
regular
, 
lex ( 

< 
lex ( 

str ) >
, 
sort ( 


"ShortChar" ) ) ]
, 

[ 

ShortChar
, 
escaped
, 
lex ( 

< 
lex ( 

str ) >
, 
sort ( 


"ShortChar" ) ) ]
, 

[ 

Character
, 
numeric
, 
appl ( 

prod ( 

id ( 


"Character-Syntax" )
, 
w ( 


"" )
, 

[ 

sort ( 


"NumChar" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"Character" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

< 
NumChar ( 

NumChar ) > ] ) ]
, 

[ 

Character
, 
short
, 
appl ( 

prod ( 

id ( 


"Character-Syntax" )
, 
w ( 


"" )
, 

[ 

sort ( 


"ShortChar" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"Character" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

< 
ShortChar ( 

ShortChar ) > ] ) ]
, 

[ 

Character
, 
top
, 
appl ( 

prod ( 

id ( 


"Character-Syntax" )
, 
w ( 


"" )
, 

[ 

ql ( 


"\\TOP" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"Character" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

l ( 


"\\TOP" ) ] ) ]
, 

[ 

Character
, 
eof
, 
appl ( 

prod ( 

id ( 


"Character-Syntax" )
, 
w ( 


"" )
, 

[ 

ql ( 


"\\EOF" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"Character" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

l ( 


"\\EOF" ) ] ) ]
, 

[ 

OptExp
, 
present
, 
appl ( 

prod ( 

id ( 


"RealCon" )
, 
w ( 


"" )
, 

[ 

ql ( 


"e" )
, 
w ( 


"" )
, 
sort ( 


"IntCon" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"OptExp" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

l ( 


"e" )
, 
w ( 

< 

"ws-after-e" ( 

str ) > )
, 
< 
IntCon ( 

IntCon ) > ] ) ]
, 

[ 

OptExp
, 
absent
, 
appl ( 

prod ( 

id ( 


"RealCon" )
, 
w ( 


"" )
, 

[ 
 ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"OptExp" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 
 ] ) ]
, 

[ 

RealCon
, 
real-con
, 
appl ( 

prod ( 

id ( 


"RealCon" )
, 
w ( 


"" )
, 

[ 

sort ( 


"IntCon" )
, 
w ( 


"" )
, 
ql ( 


"." )
, 
w ( 


"" )
, 
sort ( 


"NatCon" )
, 
w ( 


"" )
, 
sort ( 


"OptExp" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"RealCon" )
, 
w ( 


"" )
, 
no-attrs )
, 
w ( 


"" )
, 

[ 

< 
IntCon ( 

IntCon ) >
, 
w ( 

< 
ws-after-IntCon ( 

str ) > )
, 
l ( 


"." )
, 
w ( 

< 

"ws-after-." ( 

str ) > )
, 
< 
NatCon ( 

NatCon ) >
, 
w ( 

< 
ws-after-NatCon ( 

str ) > )
, 
< 
OptExp ( 

OptExp ) > ] ) ] ]
