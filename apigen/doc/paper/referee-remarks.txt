[Referee 1]

minor comments:
===============
  - the abstract should be shortened and made more self-contained
  - the authors should take care to avoid colloquialisms such as
"spectacular elimination",
    "why on earth", "works like a charm", etc.
  - I would recommend moving the related work to the end of the paper, so
you can get
    to your own contributions sooner.
  - page 9: is "true" a sort? I would think it's a constant or literal.
  - please try to be more explicit in the description of examples. For
instance, it
    would help to say that "Anthony" is substituted in the place of <str>
in the example
    on page 11. Similarly, please explain the constants 1 and 0 in the
example on p.12
  - to some extent the need for this work is an artifact of the fact that
you're
    communicating untyped terms between components. Would it be possible to
communicate
    typed components so that a type checker could ensure that type
violations don't
    take place?

---------------------------------------------------------------------------

[Referee 2]

The term "maximal subterm sharing" appears on several pages (e.g. 3, 4, 9) and
should be shortly explained for readers not familiar with them.

In the short overview of the paper (in the introduction) authors skiped
explanation for sections 4, 5 and 7.  This is really uncommon and have to be
corrected. Moreover, a reader might get impression that these sections are not
important at all.

The reference [BSVV02] to "scannerless generalized LR parsing" (SGLR) should be
cited  when the term SGLR is mentioned on first time (on page 6).

It seems to me that the statement on page 9 "The result of a successful parse
is a parse tree." is not accurate enough, because authors are using SGRL
parsing where result can be parse forest.

On several places (e.g. page 9) authors used terms left-hand (right-hand) side
(of the production). Since SDF formalism change the order of LHS and RHS of
usual BNF notation it is not clear enough if authors mean LHS (RHS) of usual
BNF notation or SDF.

The reference to fig. 2 should be provided also with the following statement on
page 16 "Our boolean syntax has five alternatives: true, false, not, and, or."

For naming nonterminals and alternatives authors suggest to use SDF labeling
mechanism and "cons" annotations. However, these features are optionaly and not
obligatory in SDF. How you get descriptive names for nonterminals and
alternatives if grammar writer does not  label each nonterminal nor use "cons"
annotations? Moreover, SDF for ATerms and  AsFix (provided in appendix A and B)
also do not use these features.

The section 5 is too short and have to be expanded. This section is very
important for readers and somehow justify the work done. If the paper can not
be extended due to page limitation then authors can shorten some lenghty
explanations in sections 2, 3 and 4.

In the related work authors compare their work with Grammars as Contract,
Zephyr ASDL, (D)COM, XML data binding, Generative Programming and  JJForester.
Since the aim of the paper (section 3) is to show how the library of access
functions that manipulate parse trees can be generated from syntax definition
this work is also very related to [Heering2000, Henriques2002] where authors
show that many language-based tools can be automatically generated by
extracting/augmenting information from language definition. Authors should
compare their work also with this research area.

@Article{Heering2000,
  author =   "Jan Heering and Paul Klint",
  title =    "Semantics of Programming Languages: A
                  Tool-Oriented Approach",
  journal =  "ACM Sigplan Notices",
  year =     "2000",
  volume =   "35",
  number =   "3",
  pages =    "39--48",
  month =    mar
}

@inProceedings{Henriques2002,
    author = {Pedro Henriques and Maria Varanda Pereira and Marjan Mernik and
Mitja Leni\v{c} and Enis Avdi\v{c}au\v{s}evi\'{c} and Viljem {\v Z}umer},
    title = {Automatic Generation of Language-based Tools},
    booktitle = {Electronic Notes in Theoretical Computer Science},
    volume = {65},
    issue = {3},
    publisher = {Elsevier Science Publishers},
    editor = {Mark van den Brand and Ralf Laemmel},
    year = {2002}
}

The citation [EFB01] for Aspect Oriented Programming (AOP) seems to me is
unfair for AOP inventors. The credit have to be put to AOP inventors first.
Therefore, I suggest to change this reference with the following reference

@InProceedings{   kla+97a,
  author        = {Gregor Kiczales and John Lamping and Anurag Mendhekar and
                  Chris Maeda and Cristina Lopes and Jean-Marc Loingtier and
                  John Irwin},
  title         = {Aspect-Oriented Programming},
  booktitle     = {11th Europeen Conference on Object-Oriented Programming},
  year          = 1997,
  editor        = {Mehmet Aksit and Satoshi Matsuoka},
  volume        = 1241,
  series        = {LNCS},
  pages         = {220-242},
  publisher     = {Springer Verlag},
  keywords      = {aop, aspect-oriented programming},
  abstract      =
{http://www.parc.xerox.com/csl/groups/sda/publications/papers/Kiczales-ECOOP97/}

}


Typos:

Page 19, Figure 4: The production "not Bool -> Bool" is missing in the Fig. 4

Page 22: ATermsthat -> ATerms that

Page 26: Aspect Oriented Programming[EFB01]
          -> Aspect Oriented Programming [EFB01]

Page 27: In the reference [BR01] the name of the workshop (conference) is
missing.

Page 28, reference [JV01]:  Symposion -> Symposium




