% Using the \atlib\ to represent tree-like data structures has become a
% popular activity, especially amongst developers of e.g. lexical scanners,
% parsers, rewrite engines and model checkers. Practical experience with the
% \atlib\ in the \metaenv\ has shown that the development and maintenance
% of tools that access \aterms\ using handcrafted code is involved and very
% error prone. Both the \emph{make and match} paradigm and the \emph{direct
% manipulation} of \aterms\ suffer from the fact that the programmer uses
% knowledge about the underlying structure (a.k.a. the signature) of the
% \aterm\ that represents the data type being accessed. Hard-wiring this
% knowledge in various tools makes it difficult to maintain the tools with
% respect to changes in the data structure.
% 
% By lifting the data definition and its mapping to an \aterm\
% representation away from the level of tool implementation, it becomes
% possible to generate a library of access functions on the data type,
% which can be used by all the tools that need access to it. The tools no
% longer directly manipulate the \aterm\ representation, but rather invoke
% methods described by the \api\ of the library, thus abstracting from
% the fact that \aterms\ are used for the implementation of the data type.

This paper describes how an \api\ and its implementation can be generated
from a syntax definition of the data type. In particular we describe how
a grammar (in \sdf) can be used to generate a library of access functions
that manipulate the parse trees of terms over this syntax. Application of
this technique in the \metaenv\ has resulted in the elimination of 47\%
of the handwritten code, thus greatly improving both maintainability of
the tools and their flexibility with respect to changes in the parse tree
format. Although the focus is on \aterms\, the issues discussed and the
techniques described are more generic and are relevant in related areas
such as \xml\ data-binding.
