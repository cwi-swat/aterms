\documentclass{seminar}

% include standard bugfixes

\input{seminar.bug}
\input{seminar.bg2}

% enable colors and gradients
\usepackage{semcolor}
\usepackage[vtex]{pstcol}
\usepackage{pst-grad}
\usepackage{color}

% extra color definitions
\definecolor{Gold}{rgb}{1.,0.84,0.}
\definecolor{DeepSkyBlue}{rgb}{0.,0.749,1.}

% choosing a gradient background
\slideframe[\psset{fillstyle=gradient,gradmidpoint=0.5,
                   gradbegin=DeepSkyBlue,gradend=white}]{scplain}

% activate layers and make them appear cumulative for interactive mode 
\usepackage{semlayer} 
\usepackage{cumulativelayers}

% definition of standard textual and graphic elements
\newcommand{\heading}[1]{{\blue \slideheading{#1}}}
\usepackage{verbatim}
\usepackage{alltt}
\usepackage[]{amsmath}


\usepackage{epsfig}
\usepackage{verbatim}

\begin{document}

\begin{slide}
\centerline{\textbf{ApiGen}}
\centerline{Generation of API's from Syntax Definitions}
\centerline{\small Pieter Olivier  \& Hayco de Jong}
\centerline{\tiny November 2, 2000}
\vspace{1cm}
\begin{center}
\epsfig{file=overview.eps}
\end{center}
\end{slide}

\begin{slide}
\centerline{\textbf{Example Specification}}
\small
\verbatiminput{Expr1.sdf}
\end{slide}

\begin{slide}
\centerline{\textbf{``Ideal'' API}}
\small
\verbatiminput{Expr.api}
\end{slide}

\begin{slide}
\centerline{\textbf{Example: evaluator}}
\verbatiminput{Expr-eval.pseudo}
\end{slide}

\begin{slide}
\centerline{\textbf{Annotated Specification}}
\small
\verbatiminput{Expr2.sdf}
\end{slide}

\begin{slide}
\centerline{\textbf{ADT for Expr (simple)}}
Example term: {\tt 3-((-4)+1.0)}\\
Represented as:
\begin{verbatim}
  minus(num(nat("3")),
        plus(neg(num(nat("4"))),
             num(real("1.0"))))
\end{verbatim}
ADT:
\verbatiminput{Expr-simple.adt}
\end{slide}

\begin{slide}
\centerline{\textbf{Example term in AsFix1}}
\tiny
\verbatiminput{Expr2-asfix.trm}
\end{slide}

\begin{slide}
\centerline{\textbf{ADT for Expr (AsFix1)}}
\small
\verbatiminput{Expr2-asfix.adt}
\end{slide}

\begin{slide}
\centerline{\textbf{Generated C Interface}}
\small
\verbatiminput{Expr2.h}
\end{slide}

\begin{slide}
\centerline{\textbf{Generated C implementation (1)}}
\vspace{1.0cm}
\small
\begin{verbatim}
ATbool isExprPlus(Expr arg) {
  return ATmatchTerm(arg, patternExprPlus, 
                     NULL, NULL, NULL, NULL);
}

ATbool hasExprLhs(Expr arg) {
  if (isExprPlus(arg)) {
    return ATtrue;
  } else if (isExprMinus(arg)) {
    return ATtrue;
  } else {
    return ATfalse;
  }
}
\end{verbatim}
\end{slide}

\begin{slide}
\centerline{\textbf{Generated C Implementation (2)}}
\vspace{1.0cm}
\small
\begin{verbatim}
Expr setExprLhs(Expr arg, Expr lhs) {
  if (isExprPlus(arg)) {
    return (Expr)
      ATsetArgument(arg,
                    ATreplace(ATgetArgument(arg, 2), 
                              lhs, 0),
                    2);
  } else if (isExprMinus(arg)) {
    return (Expr)
      ATsetArgument(arg,
                    ATreplace(ATgetArgument(arg, 2), 
                              lhs, 0), 
                    2);
  } else {
    ATabort("malformed term: %t\n", arg);
    return NULL;
  }
}
\end{verbatim}
\end{slide}

\begin{slide}
\centerline{\textbf{Future Work 1:\newline
Efficient C Implementation}}
\begin{itemize}
\item Inlining
\item Merging equal branches
\item Replace matching by efficient case distinction
\item Discard ``useless'' functions
\end{itemize}
\vspace{1.0cm}
\begin{verbatim}
static inline Expr getExprLhs(Expr arg)
{
  assert(hasExprLhs(arg));
  return (Expr) 
    ATelementAt(ATgetArgument(arg, 2), 0);
}
\end{verbatim}
\end{slide}

\begin{slide}
\centerline{\textbf{Future Work 2:\newline
Java Implementation}}
\begin{verbatim}
interface class Expr
{
  boolean hasLhs();
  Expr    getLhs();
  void    setLhs(Expr lhs);
  ...
}

interface ExprFactory
{
  Expr makeNum(Num num);
  Expr makePlus(Expr lhs, SDFLayout wsAfterLhs,
                SDFLayout wsAfterPlus, Expr rhs);
  ...
}
\end{verbatim}
\end{slide}

\begin{slide}
\centerline{\textbf{Future Research}}
\begin{itemize}
\item Different frontends\newline (XML, ASDL, $\ldots$)
\item Different backends\newline (Asf+Sdf, SML, Haskell, $\ldots$)
\item Non-functional API's\newline (non-ATerm based)
\end{itemize}
\end{slide}

\end{document}