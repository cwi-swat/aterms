


[ 


[ 

Expr
, 
plus
, 
appl ( 

prod ( 

id ( 


"Expr" )
, 
w ( 


"" )
, 

[ 

sort ( 


"Expr" )
, 
w ( 


"" )
, 
ql ( 


"+" )
, 
w ( 


"" )
, 
sort ( 


"Expr" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"Expr" )
, 
w ( 


"" )
, 
attrs ( 

l ( 


"{" )
, 
w ( 


"" )
, 

[ 

ql ( 


"cons(plus)" ) ]
, 
w ( 


"" )
, 
l ( 


"}" ) ) )
, 
w ( 


"" )
, 

[ 

< 
lhs ( 


""
, 
Expr ) >
, 
w ( 

< 
lhs ( 

wsAfter
, 
SDFWhiteSpace ) > )
, 
l ( 


"+" )
, 
w ( 

< 

"+" ( 

wsAfter
, 
SDFWhiteSpace ) > )
, 
< 
rhs ( 


""
, 
Expr ) > ] ) ]
, 

[ 

Expr
, 
minus
, 
appl ( 

prod ( 

id ( 


"Expr" )
, 
w ( 


"" )
, 

[ 

sort ( 


"Expr" )
, 
w ( 


"" )
, 
ql ( 


"-" )
, 
w ( 


"" )
, 
sort ( 


"Expr" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"Expr" )
, 
w ( 


"" )
, 
attrs ( 

l ( 


"{" )
, 
w ( 


"" )
, 

[ 

ql ( 


"cons(minus)" ) ]
, 
w ( 


"" )
, 
l ( 


"}" ) ) )
, 
w ( 


"" )
, 

[ 

< 
lhs ( 


""
, 
Expr ) >
, 
w ( 

< 
lhs ( 

wsAfter
, 
SDFWhiteSpace ) > )
, 
l ( 


"-" )
, 
w ( 

< 

"-" ( 

wsAfter
, 
SDFWhiteSpace ) > )
, 
< 
rhs ( 


""
, 
Expr ) > ] ) ]
, 

[ 

Expr
, 
neg
, 
appl ( 

prod ( 

id ( 


"Expr" )
, 
w ( 


"" )
, 

[ 

ql ( 


"-" )
, 
w ( 


"" )
, 
sort ( 


"Expr" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"Expr" )
, 
w ( 


"" )
, 
attrs ( 

l ( 


"{" )
, 
w ( 


"" )
, 

[ 

ql ( 


"cons(neg)" ) ]
, 
w ( 


"" )
, 
l ( 


"}" ) ) )
, 
w ( 


"" )
, 

[ 

l ( 


"-" )
, 
w ( 

< 

"-" ( 

wsAfter
, 
SDFWhiteSpace ) > )
, 
< 
oper ( 


""
, 
Expr ) > ] ) ]
, 

[ 

Expr
, 
num
, 
appl ( 

prod ( 

id ( 


"Expr" )
, 
w ( 


"" )
, 

[ 

sort ( 


"Num" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"Expr" )
, 
w ( 


"" )
, 
attrs ( 

l ( 


"{" )
, 
w ( 


"" )
, 

[ 

ql ( 


"cons(num)" ) ]
, 
w ( 


"" )
, 
l ( 


"}" ) ) )
, 
w ( 


"" )
, 

[ 

< 
num ( 


""
, 
Num ) > ] ) ]
, 

[ 

Expr
, 
bracket
, 
appl ( 

prod ( 

id ( 


"Expr" )
, 
w ( 


"" )
, 

[ 

ql ( 


"(" )
, 
w ( 


"" )
, 
sort ( 


"Expr" )
, 
w ( 


"" )
, 
ql ( 


")" ) ]
, 
w ( 


"" )
, 
l ( 


"->" )
, 
w ( 


"" )
, 
sort ( 


"Expr" )
, 
w ( 


"" )
, 
attrs ( 

l ( 


"{" )
, 
w ( 


"" )
, 

[ 

build-asfix-attr ( 
bracket )
, 
w ( 


"" )
, 
sep ( 


"," )
, 
w ( 


"" )
, 
ql ( 


"cons(bracket)" ) ]
, 
w ( 


"" )
, 
l ( 


"}" ) ) )
, 
w ( 


"" )
, 

[ 

l ( 


"(" )
, 
w ( 

< 

"(" ( 

wsAfter
, 
SDFWhiteSpace ) > )
, 
< 
e ( 


""
, 
Expr ) >
, 
w ( 

< 
e ( 

wsAfter
, 
SDFWhiteSpace ) > )
, 
l ( 


")" ) ] ) ]
, 

[ 

Num
, 
nat
, 
lex ( 

< 
lex ( 


""
, 
SDFLexical ) >
, 
sort ( 


"Num" ) ) ]
, 

[ 

Num
, 
real
, 
lex ( 

< 
lex ( 


""
, 
SDFLexical ) >
, 
sort ( 


"Num" ) ) ] ]
