module C-Syntax

imports C-Identifiers C-Integers C-Strings C-Layout

exports
  sorts C-STATBLOCK C-SERIES C-STAT C-EXPR
        C-INCLUDE-FILE C-FILE C-VARIABLE-DECL C-VARIABLE-DECLS
	C-FUNCTION-DECL C-TYPE C-TYPE-SPEC C-CONSTRUCT C-CONSTRUCTS
        C-PREPROC C-NEWLINE C-ACTUALS

  lexical syntax
    "<" [a-zA-Z0-9\_\.]+ ">"			-> C-INCLUDE-FILE
    "\"" [a-zA-Z0-9\_\.]+ "\""			-> C-INCLUDE-FILE
    "@"						-> C-NEWLINE {prefer}


  context-free syntax
    C-CONSTRUCTS				-> C-FILE
    C-CONSTRUCT*				-> C-CONSTRUCTS
    C-DECL					-> C-CONSTRUCT
    C-FUNCTION					-> C-CONSTRUCT
    C-PREPROC C-NEWLINE				-> C-CONSTRUCT
    C-INCLUDE					-> C-PREPROC
    C-DEFINE					-> C-PREPROC
    "#ifdef" C-ID				-> C-PREPROC
    "#ifndef" C-ID				-> C-PREPROC
    "#else"					-> C-PREPROC
    "#endif"					-> C-PREPROC
    "#include" C-INCLUDE-FILE			-> C-INCLUDE
    "#define" C-ID				-> C-DEFINE
    "#define" C-ID "(" { C-ID "," }* ")" C-EXPR -> C-DEFINE
    C-VARIABLE-DECL ";"			   	-> C-DECL
    C-VARIABLE-DECL "=" C-EXPR ";"	   	-> C-DECL
    C-FUNCTION-DECL ";"				-> C-DECL
    "extern" C-FUNCTION-DECL ";"		-> C-DECL
    "typedef" C-TYPE-SPEC C-ID ";"		-> C-DECL
    C-ID C-ID "(" C-VARIABLE-DECLS ")"		-> C-FUNCTION-DECL
    { C-VARIABLE-DECL "," }*			-> C-VARIABLE-DECLS
    C-FUNCTION-DECL C-STATBLOCK			-> C-FUNCTION
    C-TYPE C-ADDR-OP*				-> C-TYPE-SPEC
    C-ID					-> C-TYPE
    "struct" C-ID				-> C-TYPE
    C-TYPE-SPEC C-ID		   		-> C-VARIABLE-DECL
    "*"					   	-> C-ADDR-OP
    "&"					   	-> C-ADDR-OP
    "{" C-SERIES "}"                       	-> C-STATBLOCK
    C-STAT*                                	-> C-SERIES
    C-STATBLOCK                            	-> C-STAT
    C-ID "=" C-EXPR ";"                    	-> C-STAT
    "if" "(" C-EXPR ")" C-STAT "else" C-STAT	-> C-STAT
    "while" "(" C-EXPR ")" C-STATBLOCK     	-> C-STAT
    C-EXPR ";"                             	-> C-STAT
    "return" C-EXPR ";"				-> C-STAT
    { C-EXPR "," }*				-> C-ACTUALS
    C-ID "(" C-ACTUALS ")"           		-> C-EXPR { avoid }
    C-ID                                   	-> C-EXPR
    C-NAT-CON                              	-> C-EXPR
    C-STR-CON                              	-> C-EXPR
    "(" C-EXPR ")"                         	-> C-EXPR { bracket }
    "NULL"					-> C-EXPR
    "(" C-TYPE-SPEC ")" C-EXPR			-> C-EXPR

