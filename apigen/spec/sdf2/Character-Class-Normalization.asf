%%%% $Id$

%% \def\XXX{

equations

%%}

%% \subsection{Preliminaries}

%% \PrelimSyntax

%%\EQUATIONSBEGIN

%% \noindent
%% A range from a character to itself denotes just the
%% set containing that character.

   [rn1] _c - _c = _c

%% The constant range $\emptyset$ denotes an empty range, i.e.,
%% a set containing no characters. It can thus be removed from
%% a class.

%% The constant is used to normalize degenerate ranges like
%% $\Char{10}-\Char{9}$ that are empty.

   [rn2] _c1 - _c2 = (/) when _c1 <= _c2 = false

%% From now on we will assume that all ranges $c_1-c_2$ in left-hand sides of equations
%% are proper, i.e., $c_1<c_2$.
%%
%% Conditional: choose between two character classes depending on condition.

   [if1] if(true,  cc1, cc2) = cc1
   [if2] if(false, cc1, cc2) = cc2

%% The head and tail of a list of character ranges.

   [0] head(cr)     = cr   [0] tail(cr)     = (/)
   [0] head(cr cr+) = cr   [0] tail(cr cr+) = cr+

%% A range $cr_1$ is \emph{left-smaller} than a range $cr_2$
%% if $cr_1$'s left edge is smaller than $cr_2$'s left edge.
%% We have, for instance, that $\Char{10}-\Char{35}\rls\Char{16}-\Char{92}$.

   [s1] _c1       -< _c3       = _c1 < _c3
   [s2] _c1       -< _c3 - _c4 = _c1 < _c3
   [s3] _c1 - _c2 -< _c3       = _c1 < _c3
   [s4] _c1 - _c2 -< _c3 - _c4 = _c1 < _c3

%% A range $cr_1$ is \emph{smaller} than a range $cr_2$
%% if $cr_1$'s right edge is smaller than $cr_2$'s left edge.
%% For example, $\Char{10}-\Char{35}\rsm\Char{36}-\Char{92}$.

   [ss1] _c1       -<< _c3       = _c1 < _c3
   [ss2] _c1       -<< _c3 - _c4 = _c1 < _c3
   [ss3] _c1 - _c2 -<< _c3       = _c2 < _c3
   [ss4] _c1 - _c2 -<< _c3 - _c4 = _c2 < _c3

%% A range $cr_1$ is \emph{strictly smaller} than a range $cr_2$
%% if $cr_1$'s right edge is at least one smaller than $cr_2$'s left edge.
%% For example, $\Char{10}-\Char{34}\rss\Char{36}-\Char{92}$,
%% but not $\Char{10}-\Char{35}\rss\Char{36}-\Char{92}$.
%% This entails that if $cr_1\rss{}cr_2$, the ranges $cr_1$ and
%% $cr_2$ do not overlap.

   [ss1] _c1       -<<< _c3       = succ(_c1) < _c3
   [ss2] _c1       -<<< _c3 - _c4 = succ(_c1) < _c3
   [ss3] _c1 - _c2 -<<< _c3       = succ(_c2) < _c3
   [ss4] _c1 - _c2 -<<< _c3 - _c4 = succ(_c2) < _c3

%% A list of ranges is \emph{sorted} if each range is strictly smaller
%% than its successor.
%% A character class is sorted if its list of ranges is sorted.

   [sed1] sorted()            = true
   [sed2] sorted(cr)          = true
   [sed3] sorted(cr1 cr2 )    = cr1 -<<< cr2
   [sed4] sorted(cr1 cr2 cr+) = cr1 -<<< cr2 /\ sorted(cr2 cr+)
   [sed5] sorted([cr*])       = sorted(cr*)

%% \subsection{Sorting and Merging Range Lists}
%%
%% We define normalization of the concatenation of character ranges such
%% that its normal forms are always sorted.
%%
%% \smallskip
%%
%% \InsertSyntax
%% \EQUATIONSBEGIN
%%
%% \noindent
%% First we define the operator $\rhd$ that merges to overlapping
%% ranges, provided that the first is smaller than the second.
%% The following five cases have to be considered.

   [mrg1]
        _c |> _c = <_c>
   [mrg2]
        succ(_c1) = _c2
        ========================
        _c1 |> _c2 = <_c1 - _c2>
   [mrg3]
        _c1 <= _c3 = true, _c3 <= succ(_c2) = true
        ==========================================
        _c1 - _c2 |> _c3 = <_c1 - max(_c2,_c3)>
   [mrg4]
        _c1 == _c2 \/ succ(_c1) == _c2 = true
        =====================================
        _c1 |> _c2 - _c3 = <_c1 - _c3>
   [mrg5]
        _c1 <= _c3 = true, _c3 <= succ(_c2) = true
        =============================================
        _c1 - _c2 |> _c3 - _c4 = <_c1 - max(_c2,_c4)>

%% Using this operation we can define the normalization of a concatenation
%% of ranges. In the first place,
%% the empty range is a unit for concatenation
%% and a class with only an empty range is equal to the empty class.

   [emp]  [(/)]   = []
   [cat1] (/) cr+ = cr+
   [cat2] cr+ (/) = cr+

%% The steps involved in normalizing a list of character ranges are
%% \begin{itemize}
%% \item make the list right associative
%% \item order the ranges with respect to $\rs$
%% \item merge overlapping ranges.
%% \end{itemize}
%% We could achieve this by means of the following equations.
%% \begin{gather*}
%%      (cr^+_1 \; cr^+_2) \; cr^+_3 = cr^+_1 \; (cr^+_2 \; cr^+_3)
%% \\[5pt]
%%      \dfrac{
%%              cr_2 \rs cr_1 = \top
%%      }{
%%              cr_1 \; cr_2 = cr_2 \; cr_1
%%      }
%% \qquad
%%      \dfrac{
%%              cr_2 \rs cr_1 = \top
%%      }{
%%              cr_1 \; (cr_2 \; cr^+) = cr_2 \; (cr_1 \; cr^+)
%%      }
%% \\[5pt]
%%      \dfrac{
%%              cr_1 \rhd cr_2 = \langle cr_3 \rangle
%%      }{
%%              cr_1 \; cr_2 = cr_3
%%      }
%% \qquad
%%      \dfrac{
%%              cr_1 \rhd cr_2 = \langle cr_3 \rangle
%%      }{
%%              cr_1 \; (cr_2 \; cr^+) = cr_3 \; cr^+
%%      }
%% \end{gather*}

%% However, if we assume that the lists that are being
%% concatenated are already in normal form, we can achieve a more efficient
%% definition of concatenation. This is formalized in the next three equations.
%% The head range of the first list is only made the head range of the new
%% list if it is strictly smaller than the head of the second list. (By
%% induction it is already strictly smaller than the head of the rest of its
%% own list.)
%% The second equation commutes the arguments of a concatenation if
%% the second is smaller than the first.
%% The third equation merges the heads of two lists into a single range and
%% then concatenates the result with the tail of the first list.

   [cat3]
        cr1 -<<< head(cr+3) = true
        =================================
        (cr1 cr+2) cr+3 = cr1 (cr+2 cr+3)
   [cat4]
        head(cr+2) -< head(cr+1) = true
        ===============================
        cr+1 cr+2 = cr+2 cr+1
   [cat5]
        head(cr+1) |> head(cr+2) = <cr3>
        =======================================
        cr+1 cr+2 = (cr3 tail(cr+1)) tail(cr+2)

%% Union of character classes is now defined by concatenating the
%% range lists of the two classes.

   [u1] []     \/ cc     = cc
   [u2] cc     \/ []     = cc
   [u3] [cr+1] \/ [cr+2] = [cr+1 cr+2]

%% \subsection{Difference}
%%
%% The difference $cc_1/cc_2$ of two classes $cc_1$ and $cc_2$ is the class $cc_3$
%% that contains all characters that are in $cc_1$, but not in $cc_2$.
%% We introduce the following auxiliary function.
%%
%% \DiffSyn
%% \EQUATIONSBEGIN
%%
%% \noindent
%% First we define the difference of single character ranges.

   [d1]
        _c1 / _c2 = if(_c1 == _c2, [], [_c1])
   [d2]
        _c1 / _c3 - _c4 = if(_c3 <= _c1 /\ _c1 <= _c4, [] , [_c1])
   [d3]
        _c1 - _c2 / _c3 = if(_c1 <= _c3 /\ _c3 <= _c2,
                                 [_c1 - pred(_c3) succ(_c3) - _c2], [_c1 - _c2])
   [d4]
        succ(_c4) = _c4'
        ==========================================================================
        _c1 - _c2 / _c3 - _c4 = if(_c3 <= _c2 /\ _c1 < _c4',
                                       [_c1 - pred(_c3) _c4' - _c2] , [_c1 - _c2])

%% If either character class is empty, the difference is immediate.

   [d5] [] / cc = []
   [d6] cc / [] = cc

%% If there is no overlap between the first two ranges in the list, then
%% the smallest can be skipped.

   [d7]
        head(cr+2) -<< head(cr+1) = true
        =======================================
        [cr+1] / [cr+2] = [cr+1] / [tail(cr+2)]
   [d8]
        head(cr+1) -<< head(cr+2) = true
        =======================================================
        [cr+1] / [cr+2] = [head(cr+1)] \/ [tail(cr+1)] / [cr+2]

%% If the conditions of the previous two equations fail, then the first
%% two ranges have an overlap. In this case the differences between these
%% ranges are taken.

   [default-d9]
        head(cr+1) = cr1, head(cr+2) = cr2
        ===============================================
        [cr+1] / [cr+2] = (cr1 / cr2 \/ [tail(cr+1)])
                          / (cr2 / cr1 \/ [tail(cr+2)])

%% \subsection{Other Operations}
%%
%% Now we can define the other operations on character classes.
%% The complement with respect to $[\Char{0}-\topchar]$. The complement of
%% classes of more than one range is defined in terms of difference.

%%   [co1] ~ []    = [\0 - \TOP]
   [co1] ~ []    = [\BOT-\TOP]
%%   [co4] ~ [cr+] = [\0 - \TOP] / [cr+]
   [co4] ~ [cr+] = [\BOT-\TOP] / [cr+]

%% Intersection is defined in terms of difference.

   [int1] cc1 /\ cc2 = cc1 / (cc1 / cc2)

%% Equality boils down to syntactic equality. See Appendix~\ref{Sec:Correctness}
%% for a justification.

   [eq1] cc  == cc  = true
   [eq2] cc1 == cc2 = false when cc1 != cc2

%% A character is a member of a character class if it is contained in one of its
%% ranges.

  [0] _c (- _c        = true
  [0] _c (- _c'       = false when _c != _c'
  [0] _c (- _c1 - _c2 = _c1 <= _c /\ _c <= _c2
  [0] _c (-           = false
  [0] _c (- cr cr+    = false when _c -< cr = true
  [0] _c (- cr cr+    = true  when _c (- cr = true
  [default-0] _c (- cr cr+ = _c (- cr+

  [0] _c (- [cr*] = _c (- cr*

%% A character class $cc_1$ is a subset of a character class $cc_2$ if the union
%% of the two classes equals $cc_2$.

   [0]          cc   (= cc  = true
   [0]          [_c] (= cc  = _c (- cc
   [default-0]  cc1  (= cc2 = cc1 \/ cc2 == cc2

%% A character class $cc_1$ is smaller or equal than a character class $cc_2$ if
%% the smallest range of $cc_1$ is left-smaller than the smallest range of $cc_2$ or
%% if $cc_1$ is empty.

   [0] []     <= cc     = true
   [0] [cr+]  <= []     = false
   [0] [cr+1] <= [cr+2] = head(cr+1) -< head(cr+2)
