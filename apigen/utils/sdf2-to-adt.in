#! /bin/sh

# {{{ variables

     prefix=@prefix@
exec_prefix=@exec_prefix@
     bindir=@bindir@
    datadir=@datadir@
    SGLRBIN=@SGLRBIN@
    EVALBIN=@EVALBIN@
 ASOURCEBIN=@ASOURCEBIN@
    PKGDATA=${datadir}/@PACKAGE@
        PRG=`basename $0`
       DATE=`date`

# }}}

# {{{ usage()

usage() {
cat << ENDCAT >&2
Usage: $PRG [options] <SDF2-Module>

Options:
  
  -e | --expand-cons     put cons-annotations in term patterns  [default]
  -r | --remove-cons     remove cons-annotations from term patterns
  -m | --module <MOD>    explicitly name the SDF2-module to use
  -t | --table <TBL>     explicitly name the APIGEN-table to use
  -v | --verbose         be verbose during generation
  -s | --skip-cleanup    skip cleanup fase (useful for debugging)
  -h | --help            display this information

Example: $PRG --remove-cons Booleans.sdf
ENDCAT
}

# }}}
# {{{  info()

info () {
  if [ $VERBOSE -gt 0 ]; then
    echo $* >&2
   fi
}

# }}}
# {{{  error()

error() {
  echo $* >&2
  exit 1
}

# }}}
# {{{  cleanup()

cleanup() {
  if [ ${CLEANUP} -gt 0 ]; then
    info "- Cleaning up intermediate files"
    for n in 1 2 3 4; do
      filename=".api_${n}_$$"
      rm -f ${filename}
    done
  else
    info "- No cleanup, here are your intermediate files:"
    if [ ${VERBOSE} -gt 0 ]; then
      ls -l .api_[0-5]_$$
    fi
  fi
}

# }}}
# {{{  err()

err() {
  error "Bailing out!"
}

# }}}

# {{{  default settings

# settings/options
VERBOSE=0
CLEANUP=1
CONSOPT='cons-expand'

# data needed
 APITABLE=${PKGDATA}/Sdf2-to-ADT.trm.tbl
ADDLABELS=${PKGDATA}/AddLabels.asf

# binaries
     SGLR=${SGLRBIN}/sglr
  ASOURCE=${ASOURCEBIN}/asource
SDF2TOADT=${bindir}/Sdf2-to-ADT
EVALUATOR=${EVALBIN}/asfe
APPLYFUNC=${EVALBIN}/apply-function

# }}}

# {{{ check command line

if [ $# -eq 0 ]; then
  usage
  exit 1
fi

# }}}
# {{{  handle command line options

while [ $# -gt 0 ]
do
  case $1 in
    -e | --expand-cons)
      CONSOPT='cons-expand' ;;

    -r | --remove-cons)
      CONSOPT='cons-remove' ;;

    -m | --module)
      shift; MODULE=$1 ;;

    -t | --table)
      shift; APITABLE=$1 ;;

    -v | --VERBOSE)
      VERBOSE=1 ;;

    -s | --skip-cleanup)
      CLEANUP=0 ;;

    -h | --help)
      usage; exit 0 ;;

    *)
      MODULE=$1
  esac
  shift
done

# }}}

# {{{ Sanity checks and variable setup

[ -f ${APITABLE} ] || error "No such file: ${APITABLE}"
[ -f ${SDFFILE} ] || error "No such file: ${SDFFILE}"

[ "a${MODULE}" == "a" ] && error "No module given!"
SDFFILE=${MODULE}

MODULE=`basename $MODULE .sdf`
MODULE=`basename $MODULE .sdf2`

ADTFILE="${MODULE}.adt"

# }}}

# {{{  Generate API

trap cleanup EXIT

#set -x

info "Generating ${ADTFILE} from ${SDFFILE}:"

info " - Parsing ${SDFFILE} (${APITABLE})"
${SGLR} -1 -p ${APITABLE} -s SDF -i ${SDFFILE} -o .api_1_$$ || err

info " - Labeling ${SDFFILE} (parsed)"
${APPLYFUNC} -f add-labels -s SDF -m AddLabels -i .api_1_$$ -o .api_2_$$ || err
${EVALUATOR} -w on -e ${ADDLABELS} -i .api_2_$$ -o .api_3_$$ || err

info " - Generating ADT (${SDF2TOADT})"
func="sdf-to-adt-${CONSOPT}"
${APPLYFUNC} -f ${func} -s ATerm -m Sdf2-to-ADT < .api_3_$$ > .api_4_$$ || err
${SDF2TOADT} < .api_4_$$ | ${ASOURCE} > ${ADTFILE} || err

# }}}
