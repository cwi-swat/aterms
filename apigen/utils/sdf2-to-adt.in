#! /bin/sh

# {{{ variables

     prefix=@prefix@
exec_prefix=@exec_prefix@
     bindir=@bindir@
    datadir=@datadir@
    SGLRBIN=@SGLRBIN@
    EVALBIN=@EVALBIN@
   ATERMBIN=@ATERMBIN@
 ASOURCEBIN=@ASOURCEBIN@
A2METOA1BIN=@A2METOA1BIN@
    PKGDATA=${datadir}/@PACKAGE@
        PRG=`basename $0`

# }}}

# {{{ usage()

usage() {
cat << ENDCAT >&2
Usage: $PRG -i <sdf2-specification> [options]

Parameters:
  
  -2 | --asfix2me         generate an AsFix2ME based ADT   [off]
  -i | --input  <FILE>    specify input specification      [not specified]
  -o | --output <FILE>    specify name of generated ADT    [default: <IN>.adt]
  -e | --expand-cons      propagate cons-annotations       [on]
  -r | --remove-cons      remove cons-annotations          [off]
  -t | --table <FILE>     override APIGEN-parsetable       [see below]
  -l | --label <FILE>     override labeling equations      [see below]
  -g | --generator <FILE> override compiled generator      [see below]
  -v | --verbose          be verbose during generation     [off]
  -s | --skip-cleanup     skip cleanup (debugging aid)     [off]
  -h | --help             display this information

Default locations:
   APIGEN-parsetable = ${APITABLE}
  Labeling equations = ${ADDLABELS}
  Compiled generator = ${SDF2TOADT}
  Compiled AsFix2ME generator = ${SDF2TOASFIX2MEADT}

Example: ${PRG} --remove-cons -i Booleans.sdf -o Booleans.adt

ENDCAT
}

# }}}
# {{{  info()

info () {
  if [ $VERBOSE -gt 0 ]; then
    echo $* >&2
   fi
}

# }}}
# {{{  error()

error() {
  echo "${PRG}: $*" >&2
  exit 1
}

# }}}
# {{{  require()

require() {
  [ -f $1 ] || error "no such file: $1"
}

# }}}
# {{{  cleanup()

cleanup() {
  if [ ${CLEANUP} -gt 0 ]; then
    info "- Cleaning up intermediate files"
    for n in 1 2 3 4 5; do
      filename=".api_${n}_$$"
      rm -f ${filename}
    done
  else
    info "- No cleanup, here are your intermediate files:"
    if [ ${VERBOSE} -gt 0 ]; then
      ls -l .api_[0-5]_$$
    fi
  fi
}

# }}}

# {{{  default settings

# settings/options
INPUT=""
OUTPUT=""
VERBOSE=0
CLEANUP=1
CONSOPT='cons-expand'
ASFIX2ME=0

# data needed
 APITABLE=${PKGDATA}/Sdf2-to-ADT.trm.tbl
ADDLABELS=${PKGDATA}/AddLabels.eqs

# binaries
     SGLR=${SGLRBIN}/sglr
  ASOURCE=${ASOURCEBIN}/asource
SDF2TOADT=${bindir}/Sdf2-to-ADT
SDF2TOASFIX2MEADT=${bindir}/Sdf2-to-AsFix2ME-ADT
EVALUATOR=${EVALBIN}/asfe
APPLYFUNC=${EVALBIN}/apply-function
 A2METOA1=${A2METOA1BIN}/a2metoa1

# }}}

# {{{  handle command line options

if [ $# -eq 0 ]; then
  usage
  exit 1
fi

while [ $# -gt 0 ]
do
  case $1 in
    -2 | --asfix2me)
      ASFIX2ME=1 ;;

    -e | --expand-cons)
      CONSOPT='cons-expand' ;;

    -r | --remove-cons)
      CONSOPT='cons-remove' ;;

    -i | --input)
      shift; INPUT=$1 ;;

    -o | --output)
      shift; OUTPUT=$1 ;;

    -t | --table)
      shift; APITABLE=$1 ;;

    -l | --label)
      shift; ADDLABELS=$1 ;;

    -g | --generator)
      shift; SDF2TOADT=$1 ;;

    -v | --verbose)
      VERBOSE=1 ;;

    -s | --skip-cleanup)
      CLEANUP=0 ;;

    -h | --help)
      usage; exit 0 ;;

    *)
      error "unknown option: $1"
  esac
  shift
done

# }}}

# {{{ sanity checks and variable setup

if [ "a${INPUT}" = "a" ]; then
  error "no input file specified (use -i <file>)"
else
  require ${INPUT}
fi

require ${APITABLE}

if [ "a${OUTPUT}" = "a" ]; then
  OUTPUT=${INPUT}.adt
fi

# }}}

# {{{  err()

err() {
  error "Bailing out!"
}

# }}}
# {{{  generate ADT from SDF

trap cleanup EXIT

info "Generating ${OUTPUT} from ${INPUT}:"

info " - Parsing ${INPUT} (${APITABLE})"
${SGLR} -m -p ${APITABLE} -s SDF -i ${INPUT} -o .api_1_$$ || err

info " - Labeling ${INPUT} (parsed)"
${APPLYFUNC} -f add-labels -s SDF -m AddLabels -i .api_1_$$ -o .api_2_$$ || err
${EVALUATOR} -w on -e ${ADDLABELS} -i .api_2_$$ -o .api_3_$$ || err

if [ $ASFIX2ME -gt 0 ]; then
  info " - Generating ADT (${SDF2TOASFIX2MEADT})"
  func="sdf-to-asfix2me-adt-${CONSOPT}"
  ${APPLYFUNC} -f ${func} -s ATerm -m Sdf2-to-AsFix2ME-ADT < .api_3_$$ > .api_4_$$ || err
  ${A2METOA1} -i .api_4_$$ -o .api_5_$$ || err
  ${SDF2TOASFIX2MEADT} < .api_5_$$ | ${ASOURCE} > ${OUTPUT} || err
else
  info " - Generating ADT (${SDF2TOADT})"
  func="sdf-to-adt-${CONSOPT}"
  ${APPLYFUNC} -f ${func} -s ATerm -m Sdf2-to-ADT < .api_3_$$ > .api_4_$$ || err
  ${A2METOA1} -i .api_4_$$ -o .api_5_$$ || err
  ${SDF2TOADT} < .api_5_$$ | ${ASOURCE} > ${OUTPUT} || err
fi

# }}}
